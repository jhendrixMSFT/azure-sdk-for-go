//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// DedicatedHostsServer is a fake server for instances of the armcompute.DedicatedHostsClient type.
type DedicatedHostsServer struct {
	BeginCreateOrUpdate     func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHost, options *armcompute.DedicatedHostsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDelete             func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientDeleteResponse], err azfake.ErrorResponder)
	Get                     func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientGetOptions) (resp azfake.Responder[armcompute.DedicatedHostsClientGetResponse], err azfake.ErrorResponder)
	NewListByHostGroupPager func(resourceGroupName string, hostGroupName string, options *armcompute.DedicatedHostsClientListByHostGroupOptions) (resp azfake.PagerResponder[armcompute.DedicatedHostsClientListByHostGroupResponse])
	BeginRestart            func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, options *armcompute.DedicatedHostsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientRestartResponse], err azfake.ErrorResponder)
	BeginUpdate             func(ctx context.Context, resourceGroupName string, hostGroupName string, hostName string, parameters armcompute.DedicatedHostUpdate, options *armcompute.DedicatedHostsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse], err azfake.ErrorResponder)
}

// NewDedicatedHostsServerTransport creates a new instance of DedicatedHostsServerTransport with the provided implementation.
// The returned DedicatedHostsServerTransport instance is connected to an instance of armcompute.DedicatedHostsClient by way of the
// undefined.Transporter field.
func NewDedicatedHostsServerTransport(srv *DedicatedHostsServer) *DedicatedHostsServerTransport {
	return &DedicatedHostsServerTransport{srv: srv}
}

// DedicatedHostsServerTransport connects instances of armcompute.DedicatedHostsClient to instances of DedicatedHostsServer.
// Don't use this type directly, use NewDedicatedHostsServerTransport instead.
type DedicatedHostsServerTransport struct {
	srv                     *DedicatedHostsServer
	beginCreateOrUpdate     *azfake.PollerResponder[armcompute.DedicatedHostsClientCreateOrUpdateResponse]
	beginDelete             *azfake.PollerResponder[armcompute.DedicatedHostsClientDeleteResponse]
	newListByHostGroupPager *azfake.PagerResponder[armcompute.DedicatedHostsClientListByHostGroupResponse]
	beginRestart            *azfake.PollerResponder[armcompute.DedicatedHostsClientRestartResponse]
	beginUpdate             *azfake.PollerResponder[armcompute.DedicatedHostsClientUpdateResponse]
}

// Do implements the policy.Transporter interface for DedicatedHostsServerTransport.
func (d *DedicatedHostsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DedicatedHostsClient.BeginCreateOrUpdate":
		resp, err = d.dispatchBeginCreateOrUpdate(req)
	case "DedicatedHostsClient.BeginDelete":
		resp, err = d.dispatchBeginDelete(req)
	case "DedicatedHostsClient.Get":
		resp, err = d.dispatchGet(req)
	case "DedicatedHostsClient.NewListByHostGroupPager":
		resp, err = d.dispatchNewListByHostGroupPager(req)
	case "DedicatedHostsClient.BeginRestart":
		resp, err = d.dispatchBeginRestart(req)
	case "DedicatedHostsClient.BeginUpdate":
		resp, err = d.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DedicatedHostsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if d.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/hostGroups/(?P<hostGroupName>[a-zA-Z0-9-_]+)/hosts/(?P<hostName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.DedicatedHost](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("hostGroupName")], matches[regex.SubexpIndex("hostName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginCreateOrUpdate = &resp
	}

	resp, err := d.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginCreateOrUpdate.More() {
		d.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (d *DedicatedHostsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if d.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/hostGroups/(?P<hostGroupName>[a-zA-Z0-9-_]+)/hosts/(?P<hostName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := d.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("hostGroupName")], matches[regex.SubexpIndex("hostName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginDelete = &resp
	}

	resp, err := d.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginDelete.More() {
		d.beginDelete = nil
	}

	return resp, nil
}

func (d *DedicatedHostsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/hostGroups/(?P<hostGroupName>[a-zA-Z0-9-_]+)/hosts/(?P<hostName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.DedicatedHostsClientGetOptions{
		Expand: getOptional(armcompute.InstanceViewTypes(qp.Get("$expand"))),
	}
	resp, errResp := d.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("hostGroupName")], matches[regex.SubexpIndex("hostName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (d *DedicatedHostsServerTransport) dispatchNewListByHostGroupPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByHostGroupPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByHostGroupPager not implemented")}
	}
	if d.newListByHostGroupPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/hostGroups/(?P<hostGroupName>[a-zA-Z0-9-_]+)/hosts"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListByHostGroupPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("hostGroupName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.DedicatedHostsClientListByHostGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListByHostGroupPager = &resp
	}

	resp, err := d.newListByHostGroupPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListByHostGroupPager.More() {
		d.newListByHostGroupPager = nil
	}
	return resp, nil
}

func (d *DedicatedHostsServerTransport) dispatchBeginRestart(req *http.Request) (*http.Response, error) {
	if d.srv.BeginRestart == nil {
		return nil, &nonRetriableError{errors.New("method BeginRestart not implemented")}
	}
	if d.beginRestart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/hostGroups/(?P<hostGroupName>[a-zA-Z0-9-_]+)/hosts/(?P<hostName>[a-zA-Z0-9-_]+)/restart"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := d.srv.BeginRestart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("hostGroupName")], matches[regex.SubexpIndex("hostName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginRestart = &resp
	}

	resp, err := d.beginRestart.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginRestart.More() {
		d.beginRestart = nil
	}

	return resp, nil
}

func (d *DedicatedHostsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if d.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/hostGroups/(?P<hostGroupName>[a-zA-Z0-9-_]+)/hosts/(?P<hostName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.DedicatedHostUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("hostGroupName")], matches[regex.SubexpIndex("hostName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginUpdate = &resp
	}

	resp, err := d.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginUpdate.More() {
		d.beginUpdate = nil
	}

	return resp, nil
}
