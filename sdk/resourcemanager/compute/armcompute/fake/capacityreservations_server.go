//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// CapacityReservationsServer is a fake server for instances of the armcompute.CapacityReservationsClient type.
type CapacityReservationsServer struct {
	BeginCreateOrUpdate                    func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, parameters armcompute.CapacityReservation, options *armcompute.CapacityReservationsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDelete                            func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, options *armcompute.CapacityReservationsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientDeleteResponse], err azfake.ErrorResponder)
	Get                                    func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, options *armcompute.CapacityReservationsClientGetOptions) (resp azfake.Responder[armcompute.CapacityReservationsClientGetResponse], err azfake.ErrorResponder)
	NewListByCapacityReservationGroupPager func(resourceGroupName string, capacityReservationGroupName string, options *armcompute.CapacityReservationsClientListByCapacityReservationGroupOptions) (resp azfake.PagerResponder[armcompute.CapacityReservationsClientListByCapacityReservationGroupResponse])
	BeginUpdate                            func(ctx context.Context, resourceGroupName string, capacityReservationGroupName string, capacityReservationName string, parameters armcompute.CapacityReservationUpdate, options *armcompute.CapacityReservationsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.CapacityReservationsClientUpdateResponse], err azfake.ErrorResponder)
}

// NewCapacityReservationsServerTransport creates a new instance of CapacityReservationsServerTransport with the provided implementation.
// The returned CapacityReservationsServerTransport instance is connected to an instance of armcompute.CapacityReservationsClient by way of the
// undefined.Transporter field.
func NewCapacityReservationsServerTransport(srv *CapacityReservationsServer) *CapacityReservationsServerTransport {
	return &CapacityReservationsServerTransport{srv: srv}
}

// CapacityReservationsServerTransport connects instances of armcompute.CapacityReservationsClient to instances of CapacityReservationsServer.
// Don't use this type directly, use NewCapacityReservationsServerTransport instead.
type CapacityReservationsServerTransport struct {
	srv                                    *CapacityReservationsServer
	beginCreateOrUpdate                    *azfake.PollerResponder[armcompute.CapacityReservationsClientCreateOrUpdateResponse]
	beginDelete                            *azfake.PollerResponder[armcompute.CapacityReservationsClientDeleteResponse]
	newListByCapacityReservationGroupPager *azfake.PagerResponder[armcompute.CapacityReservationsClientListByCapacityReservationGroupResponse]
	beginUpdate                            *azfake.PollerResponder[armcompute.CapacityReservationsClientUpdateResponse]
}

// Do implements the policy.Transporter interface for CapacityReservationsServerTransport.
func (c *CapacityReservationsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CapacityReservationsClient.BeginCreateOrUpdate":
		resp, err = c.dispatchBeginCreateOrUpdate(req)
	case "CapacityReservationsClient.BeginDelete":
		resp, err = c.dispatchBeginDelete(req)
	case "CapacityReservationsClient.Get":
		resp, err = c.dispatchGet(req)
	case "CapacityReservationsClient.NewListByCapacityReservationGroupPager":
		resp, err = c.dispatchNewListByCapacityReservationGroupPager(req)
	case "CapacityReservationsClient.BeginUpdate":
		resp, err = c.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CapacityReservationsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if c.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/capacityReservationGroups/(?P<capacityReservationGroupName>[a-zA-Z0-9-_]+)/capacityReservations/(?P<capacityReservationName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.CapacityReservation](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := c.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("capacityReservationGroupName")], matches[regex.SubexpIndex("capacityReservationName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginCreateOrUpdate = &resp
	}

	resp, err := c.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginCreateOrUpdate.More() {
		c.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (c *CapacityReservationsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if c.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/capacityReservationGroups/(?P<capacityReservationGroupName>[a-zA-Z0-9-_]+)/capacityReservations/(?P<capacityReservationName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := c.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("capacityReservationGroupName")], matches[regex.SubexpIndex("capacityReservationName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginDelete = &resp
	}

	resp, err := c.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginDelete.More() {
		c.beginDelete = nil
	}

	return resp, nil
}

func (c *CapacityReservationsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/capacityReservationGroups/(?P<capacityReservationGroupName>[a-zA-Z0-9-_]+)/capacityReservations/(?P<capacityReservationName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.CapacityReservationsClientGetOptions{
		Expand: getOptional(armcompute.CapacityReservationInstanceViewTypes(qp.Get("$expand"))),
	}
	resp, errResp := c.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("capacityReservationGroupName")], matches[regex.SubexpIndex("capacityReservationName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CapacityReservationsServerTransport) dispatchNewListByCapacityReservationGroupPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListByCapacityReservationGroupPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByCapacityReservationGroupPager not implemented")}
	}
	if c.newListByCapacityReservationGroupPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/capacityReservationGroups/(?P<capacityReservationGroupName>[a-zA-Z0-9-_]+)/capacityReservations"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := c.srv.NewListByCapacityReservationGroupPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("capacityReservationGroupName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.CapacityReservationsClientListByCapacityReservationGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		c.newListByCapacityReservationGroupPager = &resp
	}

	resp, err := c.newListByCapacityReservationGroupPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !c.newListByCapacityReservationGroupPager.More() {
		c.newListByCapacityReservationGroupPager = nil
	}
	return resp, nil
}

func (c *CapacityReservationsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if c.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if c.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/capacityReservationGroups/(?P<capacityReservationGroupName>[a-zA-Z0-9-_]+)/capacityReservations/(?P<capacityReservationName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.CapacityReservationUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := c.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("capacityReservationGroupName")], matches[regex.SubexpIndex("capacityReservationName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginUpdate = &resp
	}

	resp, err := c.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginUpdate.More() {
		c.beginUpdate = nil
	}

	return resp, nil
}
