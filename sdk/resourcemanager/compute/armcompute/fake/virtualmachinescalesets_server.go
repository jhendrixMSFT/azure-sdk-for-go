//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
	"strconv"
)

// VirtualMachineScaleSetsServer is a fake server for instances of the armcompute.VirtualMachineScaleSetsClient type.
type VirtualMachineScaleSetsServer struct {
	ConvertToSinglePlacementGroup                      func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VMScaleSetConvertToSinglePlacementGroupInput, options *armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientConvertToSinglePlacementGroupResponse], err azfake.ErrorResponder)
	BeginCreateOrUpdate                                func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSet, options *armcompute.VirtualMachineScaleSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDeallocate                                    func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeallocateResponse], err azfake.ErrorResponder)
	BeginDelete                                        func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteResponse], err azfake.ErrorResponder)
	BeginDeleteInstances                               func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs, options *armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse], err azfake.ErrorResponder)
	ForceRecoveryServiceFabricPlatformUpdateDomainWalk func(ctx context.Context, resourceGroupName string, vmScaleSetName string, platformUpdateDomain int32, options *armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkResponse], err azfake.ErrorResponder)
	Get                                                func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetResponse], err azfake.ErrorResponder)
	GetInstanceView                                    func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetsClientGetInstanceViewResponse], err azfake.ErrorResponder)
	NewGetOSUpgradeHistoryPager                        func(resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse])
	NewListPager                                       func(resourceGroupName string, options *armcompute.VirtualMachineScaleSetsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListResponse])
	NewListAllPager                                    func(options *armcompute.VirtualMachineScaleSetsClientListAllOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListAllResponse])
	NewListByLocationPager                             func(location string, options *armcompute.VirtualMachineScaleSetsClientListByLocationOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListByLocationResponse])
	NewListSKUsPager                                   func(resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientListSKUsOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListSKUsResponse])
	BeginPerformMaintenance                            func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse], err azfake.ErrorResponder)
	BeginPowerOff                                      func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPowerOffResponse], err azfake.ErrorResponder)
	BeginRedeploy                                      func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRedeployResponse], err azfake.ErrorResponder)
	BeginReimage                                       func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageResponse], err azfake.ErrorResponder)
	BeginReimageAll                                    func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageAllResponse], err azfake.ErrorResponder)
	BeginRestart                                       func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRestartResponse], err azfake.ErrorResponder)
	BeginSetOrchestrationServiceState                  func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.OrchestrationServiceStateInput, options *armcompute.VirtualMachineScaleSetsClientBeginSetOrchestrationServiceStateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse], err azfake.ErrorResponder)
	BeginStart                                         func(ctx context.Context, resourceGroupName string, vmScaleSetName string, options *armcompute.VirtualMachineScaleSetsClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientStartResponse], err azfake.ErrorResponder)
	BeginUpdate                                        func(ctx context.Context, resourceGroupName string, vmScaleSetName string, parameters armcompute.VirtualMachineScaleSetUpdate, options *armcompute.VirtualMachineScaleSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateResponse], err azfake.ErrorResponder)
	BeginUpdateInstances                               func(ctx context.Context, resourceGroupName string, vmScaleSetName string, vmInstanceIDs armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs, options *armcompute.VirtualMachineScaleSetsClientBeginUpdateInstancesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse], err azfake.ErrorResponder)
}

// NewVirtualMachineScaleSetsServerTransport creates a new instance of VirtualMachineScaleSetsServerTransport with the provided implementation.
// The returned VirtualMachineScaleSetsServerTransport instance is connected to an instance of armcompute.VirtualMachineScaleSetsClient by way of the
// undefined.Transporter field.
func NewVirtualMachineScaleSetsServerTransport(srv *VirtualMachineScaleSetsServer) *VirtualMachineScaleSetsServerTransport {
	return &VirtualMachineScaleSetsServerTransport{srv: srv}
}

// VirtualMachineScaleSetsServerTransport connects instances of armcompute.VirtualMachineScaleSetsClient to instances of VirtualMachineScaleSetsServer.
// Don't use this type directly, use NewVirtualMachineScaleSetsServerTransport instead.
type VirtualMachineScaleSetsServerTransport struct {
	srv                               *VirtualMachineScaleSetsServer
	beginCreateOrUpdate               *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientCreateOrUpdateResponse]
	beginDeallocate                   *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeallocateResponse]
	beginDelete                       *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteResponse]
	beginDeleteInstances              *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientDeleteInstancesResponse]
	newGetOSUpgradeHistoryPager       *azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse]
	newListPager                      *azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListResponse]
	newListAllPager                   *azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListAllResponse]
	newListByLocationPager            *azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListByLocationResponse]
	newListSKUsPager                  *azfake.PagerResponder[armcompute.VirtualMachineScaleSetsClientListSKUsResponse]
	beginPerformMaintenance           *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPerformMaintenanceResponse]
	beginPowerOff                     *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientPowerOffResponse]
	beginRedeploy                     *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRedeployResponse]
	beginReimage                      *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageResponse]
	beginReimageAll                   *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientReimageAllResponse]
	beginRestart                      *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientRestartResponse]
	beginSetOrchestrationServiceState *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientSetOrchestrationServiceStateResponse]
	beginStart                        *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientStartResponse]
	beginUpdate                       *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateResponse]
	beginUpdateInstances              *azfake.PollerResponder[armcompute.VirtualMachineScaleSetsClientUpdateInstancesResponse]
}

// Do implements the policy.Transporter interface for VirtualMachineScaleSetsServerTransport.
func (v *VirtualMachineScaleSetsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VirtualMachineScaleSetsClient.ConvertToSinglePlacementGroup":
		resp, err = v.dispatchConvertToSinglePlacementGroup(req)
	case "VirtualMachineScaleSetsClient.BeginCreateOrUpdate":
		resp, err = v.dispatchBeginCreateOrUpdate(req)
	case "VirtualMachineScaleSetsClient.BeginDeallocate":
		resp, err = v.dispatchBeginDeallocate(req)
	case "VirtualMachineScaleSetsClient.BeginDelete":
		resp, err = v.dispatchBeginDelete(req)
	case "VirtualMachineScaleSetsClient.BeginDeleteInstances":
		resp, err = v.dispatchBeginDeleteInstances(req)
	case "VirtualMachineScaleSetsClient.ForceRecoveryServiceFabricPlatformUpdateDomainWalk":
		resp, err = v.dispatchForceRecoveryServiceFabricPlatformUpdateDomainWalk(req)
	case "VirtualMachineScaleSetsClient.Get":
		resp, err = v.dispatchGet(req)
	case "VirtualMachineScaleSetsClient.GetInstanceView":
		resp, err = v.dispatchGetInstanceView(req)
	case "VirtualMachineScaleSetsClient.NewGetOSUpgradeHistoryPager":
		resp, err = v.dispatchNewGetOSUpgradeHistoryPager(req)
	case "VirtualMachineScaleSetsClient.NewListPager":
		resp, err = v.dispatchNewListPager(req)
	case "VirtualMachineScaleSetsClient.NewListAllPager":
		resp, err = v.dispatchNewListAllPager(req)
	case "VirtualMachineScaleSetsClient.NewListByLocationPager":
		resp, err = v.dispatchNewListByLocationPager(req)
	case "VirtualMachineScaleSetsClient.NewListSKUsPager":
		resp, err = v.dispatchNewListSKUsPager(req)
	case "VirtualMachineScaleSetsClient.BeginPerformMaintenance":
		resp, err = v.dispatchBeginPerformMaintenance(req)
	case "VirtualMachineScaleSetsClient.BeginPowerOff":
		resp, err = v.dispatchBeginPowerOff(req)
	case "VirtualMachineScaleSetsClient.BeginRedeploy":
		resp, err = v.dispatchBeginRedeploy(req)
	case "VirtualMachineScaleSetsClient.BeginReimage":
		resp, err = v.dispatchBeginReimage(req)
	case "VirtualMachineScaleSetsClient.BeginReimageAll":
		resp, err = v.dispatchBeginReimageAll(req)
	case "VirtualMachineScaleSetsClient.BeginRestart":
		resp, err = v.dispatchBeginRestart(req)
	case "VirtualMachineScaleSetsClient.BeginSetOrchestrationServiceState":
		resp, err = v.dispatchBeginSetOrchestrationServiceState(req)
	case "VirtualMachineScaleSetsClient.BeginStart":
		resp, err = v.dispatchBeginStart(req)
	case "VirtualMachineScaleSetsClient.BeginUpdate":
		resp, err = v.dispatchBeginUpdate(req)
	case "VirtualMachineScaleSetsClient.BeginUpdateInstances":
		resp, err = v.dispatchBeginUpdateInstances(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchConvertToSinglePlacementGroup(req *http.Request) (*http.Response, error) {
	if v.srv.ConvertToSinglePlacementGroup == nil {
		return nil, &nonRetriableError{errors.New("method ConvertToSinglePlacementGroup not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/convertToSinglePlacementGroup"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	body, err := azfake.UnmarshalRequestAsJSON[armcompute.VMScaleSetConvertToSinglePlacementGroupInput](req)
	if err != nil {
		return nil, err
	}
	resp, errResp := v.srv.ConvertToSinglePlacementGroup(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], body, nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if v.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSet](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginCreateOrUpdate = &resp
	}

	resp, err := v.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginCreateOrUpdate.More() {
		v.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginDeallocate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDeallocate == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeallocate not implemented")}
	}
	if v.beginDeallocate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/deallocate"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginDeallocateOptions{
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginDeallocate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDeallocate = &resp
	}

	resp, err := v.beginDeallocate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDeallocate.More() {
		v.beginDeallocate = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if v.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		forceDeletionParam, err := parseOptional(qp.Get("forceDeletion"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginDeleteOptions{
			ForceDeletion: forceDeletionParam,
		}
		resp, errResp := v.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDelete = &resp
	}

	resp, err := v.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDelete.More() {
		v.beginDelete = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginDeleteInstances(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDeleteInstances == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeleteInstances not implemented")}
	}
	if v.beginDeleteInstances == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/delete"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs](req)
		if err != nil {
			return nil, err
		}
		forceDeletionParam, err := parseOptional(qp.Get("forceDeletion"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginDeleteInstancesOptions{
			ForceDeletion: forceDeletionParam,
		}
		resp, errResp := v.srv.BeginDeleteInstances(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], body, &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDeleteInstances = &resp
	}

	resp, err := v.beginDeleteInstances.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDeleteInstances.More() {
		v.beginDeleteInstances = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchForceRecoveryServiceFabricPlatformUpdateDomainWalk(req *http.Request) (*http.Response, error) {
	if v.srv.ForceRecoveryServiceFabricPlatformUpdateDomainWalk == nil {
		return nil, &nonRetriableError{errors.New("method ForceRecoveryServiceFabricPlatformUpdateDomainWalk not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/forceRecoveryServiceFabricPlatformUpdateDomainWalk"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	platformUpdateDomainParam, err := strconv.ParseInt(qp.Get("platformUpdateDomain"), 10, 32)
	if err != nil {
		return nil, err
	}
	options := armcompute.VirtualMachineScaleSetsClientForceRecoveryServiceFabricPlatformUpdateDomainWalkOptions{
		Zone:             getOptional(qp.Get("zone")),
		PlacementGroupID: getOptional(qp.Get("placementGroupId")),
	}
	resp, errResp := v.srv.ForceRecoveryServiceFabricPlatformUpdateDomainWalk(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], int32(platformUpdateDomainParam), &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.VirtualMachineScaleSetsClientGetOptions{
		Expand: getOptional(armcompute.ExpandTypesForGetVMScaleSets(qp.Get("$expand"))),
	}
	resp, errResp := v.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchGetInstanceView(req *http.Request) (*http.Response, error) {
	if v.srv.GetInstanceView == nil {
		return nil, &nonRetriableError{errors.New("method GetInstanceView not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/instanceView"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.GetInstanceView(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchNewGetOSUpgradeHistoryPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewGetOSUpgradeHistoryPager == nil {
		return nil, &nonRetriableError{errors.New("method NewGetOSUpgradeHistoryPager not implemented")}
	}
	if v.newGetOSUpgradeHistoryPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/osUpgradeHistory"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewGetOSUpgradeHistoryPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachineScaleSetsClientGetOSUpgradeHistoryResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newGetOSUpgradeHistoryPager = &resp
	}

	resp, err := v.newGetOSUpgradeHistoryPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newGetOSUpgradeHistoryPager.More() {
		v.newGetOSUpgradeHistoryPager = nil
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if v.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListPager(matches[regex.SubexpIndex("resourceGroupName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachineScaleSetsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListPager = &resp
	}

	resp, err := v.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListPager.More() {
		v.newListPager = nil
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchNewListAllPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListAllPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListAllPager not implemented")}
	}
	if v.newListAllPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListAllPager(nil)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachineScaleSetsClientListAllResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListAllPager = &resp
	}

	resp, err := v.newListAllPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListAllPager.More() {
		v.newListAllPager = nil
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchNewListByLocationPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByLocationPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByLocationPager not implemented")}
	}
	if v.newListByLocationPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/virtualMachineScaleSets"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListByLocationPager(matches[regex.SubexpIndex("location")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachineScaleSetsClientListByLocationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListByLocationPager = &resp
	}

	resp, err := v.newListByLocationPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListByLocationPager.More() {
		v.newListByLocationPager = nil
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchNewListSKUsPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListSKUsPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListSKUsPager not implemented")}
	}
	if v.newListSKUsPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/skus"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListSKUsPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachineScaleSetsClientListSKUsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListSKUsPager = &resp
	}

	resp, err := v.newListSKUsPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListSKUsPager.More() {
		v.newListSKUsPager = nil
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginPerformMaintenance(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPerformMaintenance == nil {
		return nil, &nonRetriableError{errors.New("method BeginPerformMaintenance not implemented")}
	}
	if v.beginPerformMaintenance == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/performMaintenance"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginPerformMaintenanceOptions{
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginPerformMaintenance(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginPerformMaintenance = &resp
	}

	resp, err := v.beginPerformMaintenance.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginPerformMaintenance.More() {
		v.beginPerformMaintenance = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginPowerOff(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPowerOff == nil {
		return nil, &nonRetriableError{errors.New("method BeginPowerOff not implemented")}
	}
	if v.beginPowerOff == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/poweroff"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		skipShutdownParam, err := parseOptional(qp.Get("skipShutdown"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginPowerOffOptions{
			SkipShutdown:  skipShutdownParam,
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginPowerOff(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginPowerOff = &resp
	}

	resp, err := v.beginPowerOff.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginPowerOff.More() {
		v.beginPowerOff = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginRedeploy(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRedeploy == nil {
		return nil, &nonRetriableError{errors.New("method BeginRedeploy not implemented")}
	}
	if v.beginRedeploy == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/redeploy"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginRedeployOptions{
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginRedeploy(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRedeploy = &resp
	}

	resp, err := v.beginRedeploy.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRedeploy.More() {
		v.beginRedeploy = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginReimage(req *http.Request) (*http.Response, error) {
	if v.srv.BeginReimage == nil {
		return nil, &nonRetriableError{errors.New("method BeginReimage not implemented")}
	}
	if v.beginReimage == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/reimage"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetReimageParameters](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginReimageOptions{
			VMScaleSetReimageInput: getOptional(body),
		}
		resp, errResp := v.srv.BeginReimage(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginReimage = &resp
	}

	resp, err := v.beginReimage.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginReimage.More() {
		v.beginReimage = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginReimageAll(req *http.Request) (*http.Response, error) {
	if v.srv.BeginReimageAll == nil {
		return nil, &nonRetriableError{errors.New("method BeginReimageAll not implemented")}
	}
	if v.beginReimageAll == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/reimageall"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginReimageAllOptions{
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginReimageAll(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginReimageAll = &resp
	}

	resp, err := v.beginReimageAll.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginReimageAll.More() {
		v.beginReimageAll = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginRestart(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRestart == nil {
		return nil, &nonRetriableError{errors.New("method BeginRestart not implemented")}
	}
	if v.beginRestart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/restart"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginRestartOptions{
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginRestart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRestart = &resp
	}

	resp, err := v.beginRestart.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRestart.More() {
		v.beginRestart = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginSetOrchestrationServiceState(req *http.Request) (*http.Response, error) {
	if v.srv.BeginSetOrchestrationServiceState == nil {
		return nil, &nonRetriableError{errors.New("method BeginSetOrchestrationServiceState not implemented")}
	}
	if v.beginSetOrchestrationServiceState == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/setOrchestrationServiceState"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.OrchestrationServiceStateInput](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginSetOrchestrationServiceState(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginSetOrchestrationServiceState = &resp
	}

	resp, err := v.beginSetOrchestrationServiceState.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginSetOrchestrationServiceState.More() {
		v.beginSetOrchestrationServiceState = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginStart(req *http.Request) (*http.Response, error) {
	if v.srv.BeginStart == nil {
		return nil, &nonRetriableError{errors.New("method BeginStart not implemented")}
	}
	if v.beginStart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/start"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceIDs](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetsClientBeginStartOptions{
			VMInstanceIDs: getOptional(body),
		}
		resp, errResp := v.srv.BeginStart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginStart = &resp
	}

	resp, err := v.beginStart.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginStart.More() {
		v.beginStart = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if v.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginUpdate = &resp
	}

	resp, err := v.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginUpdate.More() {
		v.beginUpdate = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetsServerTransport) dispatchBeginUpdateInstances(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdateInstances == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdateInstances not implemented")}
	}
	if v.beginUpdateInstances == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/manualupgrade"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMInstanceRequiredIDs](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginUpdateInstances(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginUpdateInstances = &resp
	}

	resp, err := v.beginUpdateInstances.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginUpdateInstances.More() {
		v.beginUpdateInstances = nil
	}

	return resp, nil
}
