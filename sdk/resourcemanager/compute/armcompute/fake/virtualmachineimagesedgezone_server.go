//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
	"strconv"
)

// VirtualMachineImagesEdgeZoneServer is a fake server for instances of the armcompute.VirtualMachineImagesEdgeZoneClient type.
type VirtualMachineImagesEdgeZoneServer struct {
	Get            func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, skus string, version string, options *armcompute.VirtualMachineImagesEdgeZoneClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientGetResponse], err azfake.ErrorResponder)
	List           func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, skus string, options *armcompute.VirtualMachineImagesEdgeZoneClientListOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListResponse], err azfake.ErrorResponder)
	ListOffers     func(ctx context.Context, location string, edgeZone string, publisherName string, options *armcompute.VirtualMachineImagesEdgeZoneClientListOffersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListOffersResponse], err azfake.ErrorResponder)
	ListPublishers func(ctx context.Context, location string, edgeZone string, options *armcompute.VirtualMachineImagesEdgeZoneClientListPublishersOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListPublishersResponse], err azfake.ErrorResponder)
	ListSKUs       func(ctx context.Context, location string, edgeZone string, publisherName string, offer string, options *armcompute.VirtualMachineImagesEdgeZoneClientListSKUsOptions) (resp azfake.Responder[armcompute.VirtualMachineImagesEdgeZoneClientListSKUsResponse], err azfake.ErrorResponder)
}

// NewVirtualMachineImagesEdgeZoneServerTransport creates a new instance of VirtualMachineImagesEdgeZoneServerTransport with the provided implementation.
// The returned VirtualMachineImagesEdgeZoneServerTransport instance is connected to an instance of armcompute.VirtualMachineImagesEdgeZoneClient by way of the
// undefined.Transporter field.
func NewVirtualMachineImagesEdgeZoneServerTransport(srv *VirtualMachineImagesEdgeZoneServer) *VirtualMachineImagesEdgeZoneServerTransport {
	return &VirtualMachineImagesEdgeZoneServerTransport{srv: srv}
}

// VirtualMachineImagesEdgeZoneServerTransport connects instances of armcompute.VirtualMachineImagesEdgeZoneClient to instances of VirtualMachineImagesEdgeZoneServer.
// Don't use this type directly, use NewVirtualMachineImagesEdgeZoneServerTransport instead.
type VirtualMachineImagesEdgeZoneServerTransport struct {
	srv *VirtualMachineImagesEdgeZoneServer
}

// Do implements the policy.Transporter interface for VirtualMachineImagesEdgeZoneServerTransport.
func (v *VirtualMachineImagesEdgeZoneServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VirtualMachineImagesEdgeZoneClient.Get":
		resp, err = v.dispatchGet(req)
	case "VirtualMachineImagesEdgeZoneClient.List":
		resp, err = v.dispatchList(req)
	case "VirtualMachineImagesEdgeZoneClient.ListOffers":
		resp, err = v.dispatchListOffers(req)
	case "VirtualMachineImagesEdgeZoneClient.ListPublishers":
		resp, err = v.dispatchListPublishers(req)
	case "VirtualMachineImagesEdgeZoneClient.ListSKUs":
		resp, err = v.dispatchListSKUs(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VirtualMachineImagesEdgeZoneServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/edgeZones/(?P<edgeZone>[a-zA-Z0-9-_]+)/publishers/(?P<publisherName>[a-zA-Z0-9-_]+)/artifacttypes/vmimage/offers/(?P<offer>[a-zA-Z0-9-_]+)/skus/(?P<skus>[a-zA-Z0-9-_]+)/versions/(?P<version>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 7 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.Get(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("edgeZone")], matches[regex.SubexpIndex("publisherName")], matches[regex.SubexpIndex("offer")], matches[regex.SubexpIndex("skus")], matches[regex.SubexpIndex("version")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineImagesEdgeZoneServerTransport) dispatchList(req *http.Request) (*http.Response, error) {
	if v.srv.List == nil {
		return nil, &nonRetriableError{errors.New("method List not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/edgeZones/(?P<edgeZone>[a-zA-Z0-9-_]+)/publishers/(?P<publisherName>[a-zA-Z0-9-_]+)/artifacttypes/vmimage/offers/(?P<offer>[a-zA-Z0-9-_]+)/skus/(?P<skus>[a-zA-Z0-9-_]+)/versions"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 6 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	topParam, err := parseOptional(qp.Get("$top"), func(v string) (int32, error) {
		p, err := strconv.ParseInt(v, 10, 32)
		if err != nil {
			return 0, err
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	options := armcompute.VirtualMachineImagesEdgeZoneClientListOptions{
		Expand:  getOptional(qp.Get("$expand")),
		Top:     topParam,
		Orderby: getOptional(qp.Get("$orderby")),
	}
	resp, errResp := v.srv.List(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("edgeZone")], matches[regex.SubexpIndex("publisherName")], matches[regex.SubexpIndex("offer")], matches[regex.SubexpIndex("skus")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineImagesEdgeZoneServerTransport) dispatchListOffers(req *http.Request) (*http.Response, error) {
	if v.srv.ListOffers == nil {
		return nil, &nonRetriableError{errors.New("method ListOffers not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/edgeZones/(?P<edgeZone>[a-zA-Z0-9-_]+)/publishers/(?P<publisherName>[a-zA-Z0-9-_]+)/artifacttypes/vmimage/offers"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.ListOffers(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("edgeZone")], matches[regex.SubexpIndex("publisherName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineImagesEdgeZoneServerTransport) dispatchListPublishers(req *http.Request) (*http.Response, error) {
	if v.srv.ListPublishers == nil {
		return nil, &nonRetriableError{errors.New("method ListPublishers not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/edgeZones/(?P<edgeZone>[a-zA-Z0-9-_]+)/publishers"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.ListPublishers(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("edgeZone")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineImagesEdgeZoneServerTransport) dispatchListSKUs(req *http.Request) (*http.Response, error) {
	if v.srv.ListSKUs == nil {
		return nil, &nonRetriableError{errors.New("method ListSKUs not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/edgeZones/(?P<edgeZone>[a-zA-Z0-9-_]+)/publishers/(?P<publisherName>[a-zA-Z0-9-_]+)/artifacttypes/vmimage/offers/(?P<offer>[a-zA-Z0-9-_]+)/skus"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.ListSKUs(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("edgeZone")], matches[regex.SubexpIndex("publisherName")], matches[regex.SubexpIndex("offer")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}
