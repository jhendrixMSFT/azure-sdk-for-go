//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// SharedGalleriesServer is a fake server for instances of the armcompute.SharedGalleriesClient type.
type SharedGalleriesServer struct {
	Get          func(ctx context.Context, location string, galleryUniqueName string, options *armcompute.SharedGalleriesClientGetOptions) (resp azfake.Responder[armcompute.SharedGalleriesClientGetResponse], err azfake.ErrorResponder)
	NewListPager func(location string, options *armcompute.SharedGalleriesClientListOptions) (resp azfake.PagerResponder[armcompute.SharedGalleriesClientListResponse])
}

// NewSharedGalleriesServerTransport creates a new instance of SharedGalleriesServerTransport with the provided implementation.
// The returned SharedGalleriesServerTransport instance is connected to an instance of armcompute.SharedGalleriesClient by way of the
// undefined.Transporter field.
func NewSharedGalleriesServerTransport(srv *SharedGalleriesServer) *SharedGalleriesServerTransport {
	return &SharedGalleriesServerTransport{srv: srv}
}

// SharedGalleriesServerTransport connects instances of armcompute.SharedGalleriesClient to instances of SharedGalleriesServer.
// Don't use this type directly, use NewSharedGalleriesServerTransport instead.
type SharedGalleriesServerTransport struct {
	srv          *SharedGalleriesServer
	newListPager *azfake.PagerResponder[armcompute.SharedGalleriesClientListResponse]
}

// Do implements the policy.Transporter interface for SharedGalleriesServerTransport.
func (s *SharedGalleriesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "SharedGalleriesClient.Get":
		resp, err = s.dispatchGet(req)
	case "SharedGalleriesClient.NewListPager":
		resp, err = s.dispatchNewListPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (s *SharedGalleriesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if s.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/sharedGalleries/(?P<galleryUniqueName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := s.srv.Get(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("galleryUniqueName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (s *SharedGalleriesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if s.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if s.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/sharedGalleries"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		options := armcompute.SharedGalleriesClientListOptions{
			SharedTo: getOptional(armcompute.SharedToValues(qp.Get("sharedTo"))),
		}
		resp := s.srv.NewListPager(matches[regex.SubexpIndex("location")], &options)
		resp.InjectNextLinks(req, func(page *armcompute.SharedGalleriesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		s.newListPager = &resp
	}

	resp, err := s.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !s.newListPager.More() {
		s.newListPager = nil
	}
	return resp, nil
}
