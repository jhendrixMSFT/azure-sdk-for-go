//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// CloudServiceRoleInstancesServer is a fake server for instances of the armcompute.CloudServiceRoleInstancesClient type.
type CloudServiceRoleInstancesServer struct {
	BeginDelete          func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientDeleteResponse], err azfake.ErrorResponder)
	Get                  func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetResponse], err azfake.ErrorResponder)
	GetInstanceView      func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetInstanceViewResponse], err azfake.ErrorResponder)
	GetRemoteDesktopFile func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientGetRemoteDesktopFileOptions) (resp azfake.Responder[armcompute.CloudServiceRoleInstancesClientGetRemoteDesktopFileResponse], err azfake.ErrorResponder)
	NewListPager         func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientListOptions) (resp azfake.PagerResponder[armcompute.CloudServiceRoleInstancesClientListResponse])
	BeginRebuild         func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginRebuildOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRebuildResponse], err azfake.ErrorResponder)
	BeginReimage         func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientReimageResponse], err azfake.ErrorResponder)
	BeginRestart         func(ctx context.Context, roleInstanceName string, resourceGroupName string, cloudServiceName string, options *armcompute.CloudServiceRoleInstancesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRestartResponse], err azfake.ErrorResponder)
}

// NewCloudServiceRoleInstancesServerTransport creates a new instance of CloudServiceRoleInstancesServerTransport with the provided implementation.
// The returned CloudServiceRoleInstancesServerTransport instance is connected to an instance of armcompute.CloudServiceRoleInstancesClient by way of the
// undefined.Transporter field.
func NewCloudServiceRoleInstancesServerTransport(srv *CloudServiceRoleInstancesServer) *CloudServiceRoleInstancesServerTransport {
	return &CloudServiceRoleInstancesServerTransport{srv: srv}
}

// CloudServiceRoleInstancesServerTransport connects instances of armcompute.CloudServiceRoleInstancesClient to instances of CloudServiceRoleInstancesServer.
// Don't use this type directly, use NewCloudServiceRoleInstancesServerTransport instead.
type CloudServiceRoleInstancesServerTransport struct {
	srv          *CloudServiceRoleInstancesServer
	beginDelete  *azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientDeleteResponse]
	newListPager *azfake.PagerResponder[armcompute.CloudServiceRoleInstancesClientListResponse]
	beginRebuild *azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRebuildResponse]
	beginReimage *azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientReimageResponse]
	beginRestart *azfake.PollerResponder[armcompute.CloudServiceRoleInstancesClientRestartResponse]
}

// Do implements the policy.Transporter interface for CloudServiceRoleInstancesServerTransport.
func (c *CloudServiceRoleInstancesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CloudServiceRoleInstancesClient.BeginDelete":
		resp, err = c.dispatchBeginDelete(req)
	case "CloudServiceRoleInstancesClient.Get":
		resp, err = c.dispatchGet(req)
	case "CloudServiceRoleInstancesClient.GetInstanceView":
		resp, err = c.dispatchGetInstanceView(req)
	case "CloudServiceRoleInstancesClient.GetRemoteDesktopFile":
		resp, err = c.dispatchGetRemoteDesktopFile(req)
	case "CloudServiceRoleInstancesClient.NewListPager":
		resp, err = c.dispatchNewListPager(req)
	case "CloudServiceRoleInstancesClient.BeginRebuild":
		resp, err = c.dispatchBeginRebuild(req)
	case "CloudServiceRoleInstancesClient.BeginReimage":
		resp, err = c.dispatchBeginReimage(req)
	case "CloudServiceRoleInstancesClient.BeginRestart":
		resp, err = c.dispatchBeginRestart(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if c.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if c.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := c.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginDelete = &resp
	}

	resp, err := c.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginDelete.More() {
		c.beginDelete = nil
	}

	return resp, nil
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if c.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.CloudServiceRoleInstancesClientGetOptions{
		Expand: getOptional(armcompute.InstanceViewTypes(qp.Get("$expand"))),
	}
	resp, errResp := c.srv.Get(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchGetInstanceView(req *http.Request) (*http.Response, error) {
	if c.srv.GetInstanceView == nil {
		return nil, &nonRetriableError{errors.New("method GetInstanceView not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)/instanceView"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := c.srv.GetInstanceView(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchGetRemoteDesktopFile(req *http.Request) (*http.Response, error) {
	if c.srv.GetRemoteDesktopFile == nil {
		return nil, &nonRetriableError{errors.New("method GetRemoteDesktopFile not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)/remoteDesktopFile"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := c.srv.GetRemoteDesktopFile(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if c.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		options := armcompute.CloudServiceRoleInstancesClientListOptions{
			Expand: getOptional(armcompute.InstanceViewTypes(qp.Get("$expand"))),
		}
		resp := c.srv.NewListPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], &options)
		resp.InjectNextLinks(req, func(page *armcompute.CloudServiceRoleInstancesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		c.newListPager = &resp
	}

	resp, err := c.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !c.newListPager.More() {
		c.newListPager = nil
	}
	return resp, nil
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchBeginRebuild(req *http.Request) (*http.Response, error) {
	if c.srv.BeginRebuild == nil {
		return nil, &nonRetriableError{errors.New("method BeginRebuild not implemented")}
	}
	if c.beginRebuild == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)/rebuild"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := c.srv.BeginRebuild(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginRebuild = &resp
	}

	resp, err := c.beginRebuild.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginRebuild.More() {
		c.beginRebuild = nil
	}

	return resp, nil
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchBeginReimage(req *http.Request) (*http.Response, error) {
	if c.srv.BeginReimage == nil {
		return nil, &nonRetriableError{errors.New("method BeginReimage not implemented")}
	}
	if c.beginReimage == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)/reimage"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := c.srv.BeginReimage(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginReimage = &resp
	}

	resp, err := c.beginReimage.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginReimage.More() {
		c.beginReimage = nil
	}

	return resp, nil
}

func (c *CloudServiceRoleInstancesServerTransport) dispatchBeginRestart(req *http.Request) (*http.Response, error) {
	if c.srv.BeginRestart == nil {
		return nil, &nonRetriableError{errors.New("method BeginRestart not implemented")}
	}
	if c.beginRestart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/roleInstances/(?P<roleInstanceName>[a-zA-Z0-9-_]+)/restart"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := c.srv.BeginRestart(req.Context(), matches[regex.SubexpIndex("roleInstanceName")], matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginRestart = &resp
	}

	resp, err := c.beginRestart.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginRestart.More() {
		c.beginRestart = nil
	}

	return resp, nil
}
