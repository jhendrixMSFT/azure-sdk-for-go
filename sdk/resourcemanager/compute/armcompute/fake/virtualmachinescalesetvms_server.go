//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
	"strconv"
)

// VirtualMachineScaleSetVMsServer is a fake server for instances of the armcompute.VirtualMachineScaleSetVMsClient type.
type VirtualMachineScaleSetVMsServer struct {
	BeginDeallocate             func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse], err azfake.ErrorResponder)
	BeginDelete                 func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeleteResponse], err azfake.ErrorResponder)
	Get                         func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetResponse], err azfake.ErrorResponder)
	GetInstanceView             func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientGetInstanceViewResponse], err azfake.ErrorResponder)
	NewListPager                func(resourceGroupName string, virtualMachineScaleSetName string, options *armcompute.VirtualMachineScaleSetVMsClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMsClientListResponse])
	BeginPerformMaintenance     func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse], err azfake.ErrorResponder)
	BeginPowerOff               func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse], err azfake.ErrorResponder)
	BeginRedeploy               func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRedeployResponse], err azfake.ErrorResponder)
	BeginReimage                func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageResponse], err azfake.ErrorResponder)
	BeginReimageAll             func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginReimageAllOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse], err azfake.ErrorResponder)
	BeginRestart                func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRestartResponse], err azfake.ErrorResponder)
	RetrieveBootDiagnosticsData func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataResponse], err azfake.ErrorResponder)
	BeginRunCommand             func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, parameters armcompute.RunCommandInput, options *armcompute.VirtualMachineScaleSetVMsClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse], err azfake.ErrorResponder)
	SimulateEviction            func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionOptions) (resp azfake.Responder[armcompute.VirtualMachineScaleSetVMsClientSimulateEvictionResponse], err azfake.ErrorResponder)
	BeginStart                  func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, options *armcompute.VirtualMachineScaleSetVMsClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientStartResponse], err azfake.ErrorResponder)
	BeginUpdate                 func(ctx context.Context, resourceGroupName string, vmScaleSetName string, instanceID string, parameters armcompute.VirtualMachineScaleSetVM, options *armcompute.VirtualMachineScaleSetVMsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientUpdateResponse], err azfake.ErrorResponder)
}

// NewVirtualMachineScaleSetVMsServerTransport creates a new instance of VirtualMachineScaleSetVMsServerTransport with the provided implementation.
// The returned VirtualMachineScaleSetVMsServerTransport instance is connected to an instance of armcompute.VirtualMachineScaleSetVMsClient by way of the
// undefined.Transporter field.
func NewVirtualMachineScaleSetVMsServerTransport(srv *VirtualMachineScaleSetVMsServer) *VirtualMachineScaleSetVMsServerTransport {
	return &VirtualMachineScaleSetVMsServerTransport{srv: srv}
}

// VirtualMachineScaleSetVMsServerTransport connects instances of armcompute.VirtualMachineScaleSetVMsClient to instances of VirtualMachineScaleSetVMsServer.
// Don't use this type directly, use NewVirtualMachineScaleSetVMsServerTransport instead.
type VirtualMachineScaleSetVMsServerTransport struct {
	srv                     *VirtualMachineScaleSetVMsServer
	beginDeallocate         *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeallocateResponse]
	beginDelete             *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientDeleteResponse]
	newListPager            *azfake.PagerResponder[armcompute.VirtualMachineScaleSetVMsClientListResponse]
	beginPerformMaintenance *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPerformMaintenanceResponse]
	beginPowerOff           *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientPowerOffResponse]
	beginRedeploy           *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRedeployResponse]
	beginReimage            *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageResponse]
	beginReimageAll         *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientReimageAllResponse]
	beginRestart            *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRestartResponse]
	beginRunCommand         *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientRunCommandResponse]
	beginStart              *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientStartResponse]
	beginUpdate             *azfake.PollerResponder[armcompute.VirtualMachineScaleSetVMsClientUpdateResponse]
}

// Do implements the policy.Transporter interface for VirtualMachineScaleSetVMsServerTransport.
func (v *VirtualMachineScaleSetVMsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VirtualMachineScaleSetVMsClient.BeginDeallocate":
		resp, err = v.dispatchBeginDeallocate(req)
	case "VirtualMachineScaleSetVMsClient.BeginDelete":
		resp, err = v.dispatchBeginDelete(req)
	case "VirtualMachineScaleSetVMsClient.Get":
		resp, err = v.dispatchGet(req)
	case "VirtualMachineScaleSetVMsClient.GetInstanceView":
		resp, err = v.dispatchGetInstanceView(req)
	case "VirtualMachineScaleSetVMsClient.NewListPager":
		resp, err = v.dispatchNewListPager(req)
	case "VirtualMachineScaleSetVMsClient.BeginPerformMaintenance":
		resp, err = v.dispatchBeginPerformMaintenance(req)
	case "VirtualMachineScaleSetVMsClient.BeginPowerOff":
		resp, err = v.dispatchBeginPowerOff(req)
	case "VirtualMachineScaleSetVMsClient.BeginRedeploy":
		resp, err = v.dispatchBeginRedeploy(req)
	case "VirtualMachineScaleSetVMsClient.BeginReimage":
		resp, err = v.dispatchBeginReimage(req)
	case "VirtualMachineScaleSetVMsClient.BeginReimageAll":
		resp, err = v.dispatchBeginReimageAll(req)
	case "VirtualMachineScaleSetVMsClient.BeginRestart":
		resp, err = v.dispatchBeginRestart(req)
	case "VirtualMachineScaleSetVMsClient.RetrieveBootDiagnosticsData":
		resp, err = v.dispatchRetrieveBootDiagnosticsData(req)
	case "VirtualMachineScaleSetVMsClient.BeginRunCommand":
		resp, err = v.dispatchBeginRunCommand(req)
	case "VirtualMachineScaleSetVMsClient.SimulateEviction":
		resp, err = v.dispatchSimulateEviction(req)
	case "VirtualMachineScaleSetVMsClient.BeginStart":
		resp, err = v.dispatchBeginStart(req)
	case "VirtualMachineScaleSetVMsClient.BeginUpdate":
		resp, err = v.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginDeallocate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDeallocate == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeallocate not implemented")}
	}
	if v.beginDeallocate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)/deallocate"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginDeallocate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDeallocate = &resp
	}

	resp, err := v.beginDeallocate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDeallocate.More() {
		v.beginDeallocate = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if v.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		forceDeletionParam, err := parseOptional(qp.Get("forceDeletion"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetVMsClientBeginDeleteOptions{
			ForceDeletion: forceDeletionParam,
		}
		resp, errResp := v.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDelete = &resp
	}

	resp, err := v.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDelete.More() {
		v.beginDelete = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.VirtualMachineScaleSetVMsClientGetOptions{
		Expand: getOptional(armcompute.InstanceViewTypes(qp.Get("$expand"))),
	}
	resp, errResp := v.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchGetInstanceView(req *http.Request) (*http.Response, error) {
	if v.srv.GetInstanceView == nil {
		return nil, &nonRetriableError{errors.New("method GetInstanceView not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)/instanceView"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.GetInstanceView(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if v.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<virtualMachineScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		options := armcompute.VirtualMachineScaleSetVMsClientListOptions{
			Filter: getOptional(qp.Get("$filter")),
			Select: getOptional(qp.Get("$select")),
			Expand: getOptional(qp.Get("$expand")),
		}
		resp := v.srv.NewListPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("virtualMachineScaleSetName")], &options)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachineScaleSetVMsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListPager = &resp
	}

	resp, err := v.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListPager.More() {
		v.newListPager = nil
	}
	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginPerformMaintenance(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPerformMaintenance == nil {
		return nil, &nonRetriableError{errors.New("method BeginPerformMaintenance not implemented")}
	}
	if v.beginPerformMaintenance == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/performMaintenance"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginPerformMaintenance(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginPerformMaintenance = &resp
	}

	resp, err := v.beginPerformMaintenance.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginPerformMaintenance.More() {
		v.beginPerformMaintenance = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginPowerOff(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPowerOff == nil {
		return nil, &nonRetriableError{errors.New("method BeginPowerOff not implemented")}
	}
	if v.beginPowerOff == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/poweroff"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		skipShutdownParam, err := parseOptional(qp.Get("skipShutdown"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetVMsClientBeginPowerOffOptions{
			SkipShutdown: skipShutdownParam,
		}
		resp, errResp := v.srv.BeginPowerOff(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginPowerOff = &resp
	}

	resp, err := v.beginPowerOff.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginPowerOff.More() {
		v.beginPowerOff = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginRedeploy(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRedeploy == nil {
		return nil, &nonRetriableError{errors.New("method BeginRedeploy not implemented")}
	}
	if v.beginRedeploy == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/redeploy"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginRedeploy(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRedeploy = &resp
	}

	resp, err := v.beginRedeploy.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRedeploy.More() {
		v.beginRedeploy = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginReimage(req *http.Request) (*http.Response, error) {
	if v.srv.BeginReimage == nil {
		return nil, &nonRetriableError{errors.New("method BeginReimage not implemented")}
	}
	if v.beginReimage == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)/reimage"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVMReimageParameters](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachineScaleSetVMsClientBeginReimageOptions{
			VMScaleSetVMReimageInput: getOptional(body),
		}
		resp, errResp := v.srv.BeginReimage(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginReimage = &resp
	}

	resp, err := v.beginReimage.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginReimage.More() {
		v.beginReimage = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginReimageAll(req *http.Request) (*http.Response, error) {
	if v.srv.BeginReimageAll == nil {
		return nil, &nonRetriableError{errors.New("method BeginReimageAll not implemented")}
	}
	if v.beginReimageAll == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)/reimageall"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginReimageAll(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginReimageAll = &resp
	}

	resp, err := v.beginReimageAll.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginReimageAll.More() {
		v.beginReimageAll = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginRestart(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRestart == nil {
		return nil, &nonRetriableError{errors.New("method BeginRestart not implemented")}
	}
	if v.beginRestart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/restart"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginRestart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRestart = &resp
	}

	resp, err := v.beginRestart.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRestart.More() {
		v.beginRestart = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchRetrieveBootDiagnosticsData(req *http.Request) (*http.Response, error) {
	if v.srv.RetrieveBootDiagnosticsData == nil {
		return nil, &nonRetriableError{errors.New("method RetrieveBootDiagnosticsData not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/retrieveBootDiagnosticsData"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	sasURIExpirationTimeInMinutesParam, err := parseOptional(qp.Get("sasUriExpirationTimeInMinutes"), func(v string) (int32, error) {
		p, err := strconv.ParseInt(v, 10, 32)
		if err != nil {
			return 0, err
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	options := armcompute.VirtualMachineScaleSetVMsClientRetrieveBootDiagnosticsDataOptions{
		SasURIExpirationTimeInMinutes: sasURIExpirationTimeInMinutesParam,
	}
	resp, errResp := v.srv.RetrieveBootDiagnosticsData(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginRunCommand(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRunCommand == nil {
		return nil, &nonRetriableError{errors.New("method BeginRunCommand not implemented")}
	}
	if v.beginRunCommand == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/runCommand"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.RunCommandInput](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginRunCommand(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRunCommand = &resp
	}

	resp, err := v.beginRunCommand.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRunCommand.More() {
		v.beginRunCommand = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchSimulateEviction(req *http.Request) (*http.Response, error) {
	if v.srv.SimulateEviction == nil {
		return nil, &nonRetriableError{errors.New("method SimulateEviction not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)/simulateEviction"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.SimulateEviction(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginStart(req *http.Request) (*http.Response, error) {
	if v.srv.BeginStart == nil {
		return nil, &nonRetriableError{errors.New("method BeginStart not implemented")}
	}
	if v.beginStart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualmachines/(?P<instanceId>[a-zA-Z0-9-_]+)/start"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginStart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginStart = &resp
	}

	resp, err := v.beginStart.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginStart.More() {
		v.beginStart = nil
	}

	return resp, nil
}

func (v *VirtualMachineScaleSetVMsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if v.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachineScaleSets/(?P<vmScaleSetName>[a-zA-Z0-9-_]+)/virtualMachines/(?P<instanceId>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineScaleSetVM](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmScaleSetName")], matches[regex.SubexpIndex("instanceId")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginUpdate = &resp
	}

	resp, err := v.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginUpdate.More() {
		v.beginUpdate = nil
	}

	return resp, nil
}
