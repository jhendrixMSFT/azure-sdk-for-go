//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
	"strconv"
)

// VirtualMachinesServer is a fake server for instances of the armcompute.VirtualMachinesClient type.
type VirtualMachinesServer struct {
	BeginAssessPatches          func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginAssessPatchesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientAssessPatchesResponse], err azfake.ErrorResponder)
	BeginCapture                func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineCaptureParameters, options *armcompute.VirtualMachinesClientBeginCaptureOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCaptureResponse], err azfake.ErrorResponder)
	BeginConvertToManagedDisks  func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginConvertToManagedDisksOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientConvertToManagedDisksResponse], err azfake.ErrorResponder)
	BeginCreateOrUpdate         func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachine, options *armcompute.VirtualMachinesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDeallocate             func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginDeallocateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientDeallocateResponse], err azfake.ErrorResponder)
	BeginDelete                 func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientDeleteResponse], err azfake.ErrorResponder)
	Generalize                  func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGeneralizeOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGeneralizeResponse], err azfake.ErrorResponder)
	Get                         func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientGetOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientGetResponse], err azfake.ErrorResponder)
	BeginInstallPatches         func(ctx context.Context, resourceGroupName string, vmName string, installPatchesInput armcompute.VirtualMachineInstallPatchesParameters, options *armcompute.VirtualMachinesClientBeginInstallPatchesOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientInstallPatchesResponse], err azfake.ErrorResponder)
	InstanceView                func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientInstanceViewOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientInstanceViewResponse], err azfake.ErrorResponder)
	NewListPager                func(resourceGroupName string, options *armcompute.VirtualMachinesClientListOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListResponse])
	NewListAllPager             func(options *armcompute.VirtualMachinesClientListAllOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListAllResponse])
	NewListAvailableSizesPager  func(resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientListAvailableSizesOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListAvailableSizesResponse])
	NewListByLocationPager      func(location string, options *armcompute.VirtualMachinesClientListByLocationOptions) (resp azfake.PagerResponder[armcompute.VirtualMachinesClientListByLocationResponse])
	BeginPerformMaintenance     func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginPerformMaintenanceOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientPerformMaintenanceResponse], err azfake.ErrorResponder)
	BeginPowerOff               func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginPowerOffOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientPowerOffResponse], err azfake.ErrorResponder)
	BeginReapply                func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReapplyOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReapplyResponse], err azfake.ErrorResponder)
	BeginRedeploy               func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginRedeployOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRedeployResponse], err azfake.ErrorResponder)
	BeginReimage                func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginReimageOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse], err azfake.ErrorResponder)
	BeginRestart                func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginRestartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRestartResponse], err azfake.ErrorResponder)
	RetrieveBootDiagnosticsData func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataResponse], err azfake.ErrorResponder)
	BeginRunCommand             func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.RunCommandInput, options *armcompute.VirtualMachinesClientBeginRunCommandOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientRunCommandResponse], err azfake.ErrorResponder)
	SimulateEviction            func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientSimulateEvictionOptions) (resp azfake.Responder[armcompute.VirtualMachinesClientSimulateEvictionResponse], err azfake.ErrorResponder)
	BeginStart                  func(ctx context.Context, resourceGroupName string, vmName string, options *armcompute.VirtualMachinesClientBeginStartOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientStartResponse], err azfake.ErrorResponder)
	BeginUpdate                 func(ctx context.Context, resourceGroupName string, vmName string, parameters armcompute.VirtualMachineUpdate, options *armcompute.VirtualMachinesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse], err azfake.ErrorResponder)
}

// NewVirtualMachinesServerTransport creates a new instance of VirtualMachinesServerTransport with the provided implementation.
// The returned VirtualMachinesServerTransport instance is connected to an instance of armcompute.VirtualMachinesClient by way of the
// undefined.Transporter field.
func NewVirtualMachinesServerTransport(srv *VirtualMachinesServer) *VirtualMachinesServerTransport {
	return &VirtualMachinesServerTransport{srv: srv}
}

// VirtualMachinesServerTransport connects instances of armcompute.VirtualMachinesClient to instances of VirtualMachinesServer.
// Don't use this type directly, use NewVirtualMachinesServerTransport instead.
type VirtualMachinesServerTransport struct {
	srv                        *VirtualMachinesServer
	beginAssessPatches         *azfake.PollerResponder[armcompute.VirtualMachinesClientAssessPatchesResponse]
	beginCapture               *azfake.PollerResponder[armcompute.VirtualMachinesClientCaptureResponse]
	beginConvertToManagedDisks *azfake.PollerResponder[armcompute.VirtualMachinesClientConvertToManagedDisksResponse]
	beginCreateOrUpdate        *azfake.PollerResponder[armcompute.VirtualMachinesClientCreateOrUpdateResponse]
	beginDeallocate            *azfake.PollerResponder[armcompute.VirtualMachinesClientDeallocateResponse]
	beginDelete                *azfake.PollerResponder[armcompute.VirtualMachinesClientDeleteResponse]
	beginInstallPatches        *azfake.PollerResponder[armcompute.VirtualMachinesClientInstallPatchesResponse]
	newListPager               *azfake.PagerResponder[armcompute.VirtualMachinesClientListResponse]
	newListAllPager            *azfake.PagerResponder[armcompute.VirtualMachinesClientListAllResponse]
	newListAvailableSizesPager *azfake.PagerResponder[armcompute.VirtualMachinesClientListAvailableSizesResponse]
	newListByLocationPager     *azfake.PagerResponder[armcompute.VirtualMachinesClientListByLocationResponse]
	beginPerformMaintenance    *azfake.PollerResponder[armcompute.VirtualMachinesClientPerformMaintenanceResponse]
	beginPowerOff              *azfake.PollerResponder[armcompute.VirtualMachinesClientPowerOffResponse]
	beginReapply               *azfake.PollerResponder[armcompute.VirtualMachinesClientReapplyResponse]
	beginRedeploy              *azfake.PollerResponder[armcompute.VirtualMachinesClientRedeployResponse]
	beginReimage               *azfake.PollerResponder[armcompute.VirtualMachinesClientReimageResponse]
	beginRestart               *azfake.PollerResponder[armcompute.VirtualMachinesClientRestartResponse]
	beginRunCommand            *azfake.PollerResponder[armcompute.VirtualMachinesClientRunCommandResponse]
	beginStart                 *azfake.PollerResponder[armcompute.VirtualMachinesClientStartResponse]
	beginUpdate                *azfake.PollerResponder[armcompute.VirtualMachinesClientUpdateResponse]
}

// Do implements the policy.Transporter interface for VirtualMachinesServerTransport.
func (v *VirtualMachinesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "VirtualMachinesClient.BeginAssessPatches":
		resp, err = v.dispatchBeginAssessPatches(req)
	case "VirtualMachinesClient.BeginCapture":
		resp, err = v.dispatchBeginCapture(req)
	case "VirtualMachinesClient.BeginConvertToManagedDisks":
		resp, err = v.dispatchBeginConvertToManagedDisks(req)
	case "VirtualMachinesClient.BeginCreateOrUpdate":
		resp, err = v.dispatchBeginCreateOrUpdate(req)
	case "VirtualMachinesClient.BeginDeallocate":
		resp, err = v.dispatchBeginDeallocate(req)
	case "VirtualMachinesClient.BeginDelete":
		resp, err = v.dispatchBeginDelete(req)
	case "VirtualMachinesClient.Generalize":
		resp, err = v.dispatchGeneralize(req)
	case "VirtualMachinesClient.Get":
		resp, err = v.dispatchGet(req)
	case "VirtualMachinesClient.BeginInstallPatches":
		resp, err = v.dispatchBeginInstallPatches(req)
	case "VirtualMachinesClient.InstanceView":
		resp, err = v.dispatchInstanceView(req)
	case "VirtualMachinesClient.NewListPager":
		resp, err = v.dispatchNewListPager(req)
	case "VirtualMachinesClient.NewListAllPager":
		resp, err = v.dispatchNewListAllPager(req)
	case "VirtualMachinesClient.NewListAvailableSizesPager":
		resp, err = v.dispatchNewListAvailableSizesPager(req)
	case "VirtualMachinesClient.NewListByLocationPager":
		resp, err = v.dispatchNewListByLocationPager(req)
	case "VirtualMachinesClient.BeginPerformMaintenance":
		resp, err = v.dispatchBeginPerformMaintenance(req)
	case "VirtualMachinesClient.BeginPowerOff":
		resp, err = v.dispatchBeginPowerOff(req)
	case "VirtualMachinesClient.BeginReapply":
		resp, err = v.dispatchBeginReapply(req)
	case "VirtualMachinesClient.BeginRedeploy":
		resp, err = v.dispatchBeginRedeploy(req)
	case "VirtualMachinesClient.BeginReimage":
		resp, err = v.dispatchBeginReimage(req)
	case "VirtualMachinesClient.BeginRestart":
		resp, err = v.dispatchBeginRestart(req)
	case "VirtualMachinesClient.RetrieveBootDiagnosticsData":
		resp, err = v.dispatchRetrieveBootDiagnosticsData(req)
	case "VirtualMachinesClient.BeginRunCommand":
		resp, err = v.dispatchBeginRunCommand(req)
	case "VirtualMachinesClient.SimulateEviction":
		resp, err = v.dispatchSimulateEviction(req)
	case "VirtualMachinesClient.BeginStart":
		resp, err = v.dispatchBeginStart(req)
	case "VirtualMachinesClient.BeginUpdate":
		resp, err = v.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginAssessPatches(req *http.Request) (*http.Response, error) {
	if v.srv.BeginAssessPatches == nil {
		return nil, &nonRetriableError{errors.New("method BeginAssessPatches not implemented")}
	}
	if v.beginAssessPatches == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/assessPatches"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginAssessPatches(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginAssessPatches = &resp
	}

	resp, err := v.beginAssessPatches.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginAssessPatches.More() {
		v.beginAssessPatches = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginCapture(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCapture == nil {
		return nil, &nonRetriableError{errors.New("method BeginCapture not implemented")}
	}
	if v.beginCapture == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/capture"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineCaptureParameters](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginCapture(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginCapture = &resp
	}

	resp, err := v.beginCapture.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginCapture.More() {
		v.beginCapture = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginConvertToManagedDisks(req *http.Request) (*http.Response, error) {
	if v.srv.BeginConvertToManagedDisks == nil {
		return nil, &nonRetriableError{errors.New("method BeginConvertToManagedDisks not implemented")}
	}
	if v.beginConvertToManagedDisks == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/convertToManagedDisks"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginConvertToManagedDisks(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginConvertToManagedDisks = &resp
	}

	resp, err := v.beginConvertToManagedDisks.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginConvertToManagedDisks.More() {
		v.beginConvertToManagedDisks = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if v.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachine](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginCreateOrUpdate = &resp
	}

	resp, err := v.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginCreateOrUpdate.More() {
		v.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginDeallocate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDeallocate == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeallocate not implemented")}
	}
	if v.beginDeallocate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/deallocate"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		hibernateParam, err := parseOptional(qp.Get("hibernate"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachinesClientBeginDeallocateOptions{
			Hibernate: hibernateParam,
		}
		resp, errResp := v.srv.BeginDeallocate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDeallocate = &resp
	}

	resp, err := v.beginDeallocate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDeallocate.More() {
		v.beginDeallocate = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if v.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if v.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		forceDeletionParam, err := parseOptional(qp.Get("forceDeletion"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachinesClientBeginDeleteOptions{
			ForceDeletion: forceDeletionParam,
		}
		resp, errResp := v.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginDelete = &resp
	}

	resp, err := v.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginDelete.More() {
		v.beginDelete = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchGeneralize(req *http.Request) (*http.Response, error) {
	if v.srv.Generalize == nil {
		return nil, &nonRetriableError{errors.New("method Generalize not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/generalize"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.Generalize(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachinesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if v.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.VirtualMachinesClientGetOptions{
		Expand: getOptional(armcompute.InstanceViewTypes(qp.Get("$expand"))),
	}
	resp, errResp := v.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachinesServerTransport) dispatchBeginInstallPatches(req *http.Request) (*http.Response, error) {
	if v.srv.BeginInstallPatches == nil {
		return nil, &nonRetriableError{errors.New("method BeginInstallPatches not implemented")}
	}
	if v.beginInstallPatches == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/installPatches"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineInstallPatchesParameters](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginInstallPatches(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginInstallPatches = &resp
	}

	resp, err := v.beginInstallPatches.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginInstallPatches.More() {
		v.beginInstallPatches = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchInstanceView(req *http.Request) (*http.Response, error) {
	if v.srv.InstanceView == nil {
		return nil, &nonRetriableError{errors.New("method InstanceView not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/instanceView"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.InstanceView(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachinesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if v.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		options := armcompute.VirtualMachinesClientListOptions{
			Filter: getOptional(qp.Get("$filter")),
		}
		resp := v.srv.NewListPager(matches[regex.SubexpIndex("resourceGroupName")], &options)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachinesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListPager = &resp
	}

	resp, err := v.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListPager.More() {
		v.newListPager = nil
	}
	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchNewListAllPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListAllPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListAllPager not implemented")}
	}
	if v.newListAllPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		options := armcompute.VirtualMachinesClientListAllOptions{
			StatusOnly: getOptional(qp.Get("statusOnly")),
			Filter:     getOptional(qp.Get("$filter")),
		}
		resp := v.srv.NewListAllPager(&options)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachinesClientListAllResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListAllPager = &resp
	}

	resp, err := v.newListAllPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListAllPager.More() {
		v.newListAllPager = nil
	}
	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchNewListAvailableSizesPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListAvailableSizesPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListAvailableSizesPager not implemented")}
	}
	if v.newListAvailableSizesPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/vmSizes"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListAvailableSizesPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		v.newListAvailableSizesPager = &resp
	}

	resp, err := v.newListAvailableSizesPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListAvailableSizesPager.More() {
		v.newListAvailableSizesPager = nil
	}
	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchNewListByLocationPager(req *http.Request) (*http.Response, error) {
	if v.srv.NewListByLocationPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByLocationPager not implemented")}
	}
	if v.newListByLocationPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/virtualMachines"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := v.srv.NewListByLocationPager(matches[regex.SubexpIndex("location")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.VirtualMachinesClientListByLocationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		v.newListByLocationPager = &resp
	}

	resp, err := v.newListByLocationPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !v.newListByLocationPager.More() {
		v.newListByLocationPager = nil
	}
	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginPerformMaintenance(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPerformMaintenance == nil {
		return nil, &nonRetriableError{errors.New("method BeginPerformMaintenance not implemented")}
	}
	if v.beginPerformMaintenance == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/performMaintenance"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginPerformMaintenance(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginPerformMaintenance = &resp
	}

	resp, err := v.beginPerformMaintenance.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginPerformMaintenance.More() {
		v.beginPerformMaintenance = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginPowerOff(req *http.Request) (*http.Response, error) {
	if v.srv.BeginPowerOff == nil {
		return nil, &nonRetriableError{errors.New("method BeginPowerOff not implemented")}
	}
	if v.beginPowerOff == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/powerOff"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		qp := req.URL.Query()
		skipShutdownParam, err := parseOptional(qp.Get("skipShutdown"), strconv.ParseBool)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachinesClientBeginPowerOffOptions{
			SkipShutdown: skipShutdownParam,
		}
		resp, errResp := v.srv.BeginPowerOff(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginPowerOff = &resp
	}

	resp, err := v.beginPowerOff.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginPowerOff.More() {
		v.beginPowerOff = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginReapply(req *http.Request) (*http.Response, error) {
	if v.srv.BeginReapply == nil {
		return nil, &nonRetriableError{errors.New("method BeginReapply not implemented")}
	}
	if v.beginReapply == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/reapply"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginReapply(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginReapply = &resp
	}

	resp, err := v.beginReapply.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginReapply.More() {
		v.beginReapply = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginRedeploy(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRedeploy == nil {
		return nil, &nonRetriableError{errors.New("method BeginRedeploy not implemented")}
	}
	if v.beginRedeploy == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/redeploy"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginRedeploy(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRedeploy = &resp
	}

	resp, err := v.beginRedeploy.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRedeploy.More() {
		v.beginRedeploy = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginReimage(req *http.Request) (*http.Response, error) {
	if v.srv.BeginReimage == nil {
		return nil, &nonRetriableError{errors.New("method BeginReimage not implemented")}
	}
	if v.beginReimage == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/reimage"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineReimageParameters](req)
		if err != nil {
			return nil, err
		}
		options := armcompute.VirtualMachinesClientBeginReimageOptions{
			Parameters: getOptional(body),
		}
		resp, errResp := v.srv.BeginReimage(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], &options)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginReimage = &resp
	}

	resp, err := v.beginReimage.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginReimage.More() {
		v.beginReimage = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginRestart(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRestart == nil {
		return nil, &nonRetriableError{errors.New("method BeginRestart not implemented")}
	}
	if v.beginRestart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/restart"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginRestart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRestart = &resp
	}

	resp, err := v.beginRestart.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRestart.More() {
		v.beginRestart = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchRetrieveBootDiagnosticsData(req *http.Request) (*http.Response, error) {
	if v.srv.RetrieveBootDiagnosticsData == nil {
		return nil, &nonRetriableError{errors.New("method RetrieveBootDiagnosticsData not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/retrieveBootDiagnosticsData"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	sasURIExpirationTimeInMinutesParam, err := parseOptional(qp.Get("sasUriExpirationTimeInMinutes"), func(v string) (int32, error) {
		p, err := strconv.ParseInt(v, 10, 32)
		if err != nil {
			return 0, err
		}
		return int32(p), nil
	})
	if err != nil {
		return nil, err
	}
	options := armcompute.VirtualMachinesClientRetrieveBootDiagnosticsDataOptions{
		SasURIExpirationTimeInMinutes: sasURIExpirationTimeInMinutesParam,
	}
	resp, errResp := v.srv.RetrieveBootDiagnosticsData(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachinesServerTransport) dispatchBeginRunCommand(req *http.Request) (*http.Response, error) {
	if v.srv.BeginRunCommand == nil {
		return nil, &nonRetriableError{errors.New("method BeginRunCommand not implemented")}
	}
	if v.beginRunCommand == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/runCommand"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.RunCommandInput](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginRunCommand(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginRunCommand = &resp
	}

	resp, err := v.beginRunCommand.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginRunCommand.More() {
		v.beginRunCommand = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchSimulateEviction(req *http.Request) (*http.Response, error) {
	if v.srv.SimulateEviction == nil {
		return nil, &nonRetriableError{errors.New("method SimulateEviction not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/simulateEviction"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := v.srv.SimulateEviction(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (v *VirtualMachinesServerTransport) dispatchBeginStart(req *http.Request) (*http.Response, error) {
	if v.srv.BeginStart == nil {
		return nil, &nonRetriableError{errors.New("method BeginStart not implemented")}
	}
	if v.beginStart == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)/start"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := v.srv.BeginStart(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginStart = &resp
	}

	resp, err := v.beginStart.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginStart.More() {
		v.beginStart = nil
	}

	return resp, nil
}

func (v *VirtualMachinesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if v.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if v.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/virtualMachines/(?P<vmName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.VirtualMachineUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := v.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("vmName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		v.beginUpdate = &resp
	}

	resp, err := v.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !v.beginUpdate.More() {
		v.beginUpdate = nil
	}

	return resp, nil
}
