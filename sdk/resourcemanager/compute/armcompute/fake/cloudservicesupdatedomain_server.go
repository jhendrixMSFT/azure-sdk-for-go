//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
	"strconv"
)

// CloudServicesUpdateDomainServer is a fake server for instances of the armcompute.CloudServicesUpdateDomainClient type.
type CloudServicesUpdateDomainServer struct {
	GetUpdateDomain           func(ctx context.Context, resourceGroupName string, cloudServiceName string, updateDomain int32, options *armcompute.CloudServicesUpdateDomainClientGetUpdateDomainOptions) (resp azfake.Responder[armcompute.CloudServicesUpdateDomainClientGetUpdateDomainResponse], err azfake.ErrorResponder)
	NewListUpdateDomainsPager func(resourceGroupName string, cloudServiceName string, options *armcompute.CloudServicesUpdateDomainClientListUpdateDomainsOptions) (resp azfake.PagerResponder[armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse])
	BeginWalkUpdateDomain     func(ctx context.Context, resourceGroupName string, cloudServiceName string, updateDomain int32, parameters armcompute.UpdateDomain, options *armcompute.CloudServicesUpdateDomainClientBeginWalkUpdateDomainOptions) (resp azfake.PollerResponder[armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse], err azfake.ErrorResponder)
}

// NewCloudServicesUpdateDomainServerTransport creates a new instance of CloudServicesUpdateDomainServerTransport with the provided implementation.
// The returned CloudServicesUpdateDomainServerTransport instance is connected to an instance of armcompute.CloudServicesUpdateDomainClient by way of the
// undefined.Transporter field.
func NewCloudServicesUpdateDomainServerTransport(srv *CloudServicesUpdateDomainServer) *CloudServicesUpdateDomainServerTransport {
	return &CloudServicesUpdateDomainServerTransport{srv: srv}
}

// CloudServicesUpdateDomainServerTransport connects instances of armcompute.CloudServicesUpdateDomainClient to instances of CloudServicesUpdateDomainServer.
// Don't use this type directly, use NewCloudServicesUpdateDomainServerTransport instead.
type CloudServicesUpdateDomainServerTransport struct {
	srv                       *CloudServicesUpdateDomainServer
	newListUpdateDomainsPager *azfake.PagerResponder[armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse]
	beginWalkUpdateDomain     *azfake.PollerResponder[armcompute.CloudServicesUpdateDomainClientWalkUpdateDomainResponse]
}

// Do implements the policy.Transporter interface for CloudServicesUpdateDomainServerTransport.
func (c *CloudServicesUpdateDomainServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CloudServicesUpdateDomainClient.GetUpdateDomain":
		resp, err = c.dispatchGetUpdateDomain(req)
	case "CloudServicesUpdateDomainClient.NewListUpdateDomainsPager":
		resp, err = c.dispatchNewListUpdateDomainsPager(req)
	case "CloudServicesUpdateDomainClient.BeginWalkUpdateDomain":
		resp, err = c.dispatchBeginWalkUpdateDomain(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CloudServicesUpdateDomainServerTransport) dispatchGetUpdateDomain(req *http.Request) (*http.Response, error) {
	if c.srv.GetUpdateDomain == nil {
		return nil, &nonRetriableError{errors.New("method GetUpdateDomain not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/updateDomains/(?P<updateDomain>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	updateDomainParam, err := strconv.ParseInt(matches[regex.SubexpIndex("updateDomain")], 10, 32)
	if err != nil {
		return nil, err
	}
	resp, errResp := c.srv.GetUpdateDomain(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], int32(updateDomainParam), nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CloudServicesUpdateDomainServerTransport) dispatchNewListUpdateDomainsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListUpdateDomainsPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListUpdateDomainsPager not implemented")}
	}
	if c.newListUpdateDomainsPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/updateDomains"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := c.srv.NewListUpdateDomainsPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.CloudServicesUpdateDomainClientListUpdateDomainsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		c.newListUpdateDomainsPager = &resp
	}

	resp, err := c.newListUpdateDomainsPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !c.newListUpdateDomainsPager.More() {
		c.newListUpdateDomainsPager = nil
	}
	return resp, nil
}

func (c *CloudServicesUpdateDomainServerTransport) dispatchBeginWalkUpdateDomain(req *http.Request) (*http.Response, error) {
	if c.srv.BeginWalkUpdateDomain == nil {
		return nil, &nonRetriableError{errors.New("method BeginWalkUpdateDomain not implemented")}
	}
	if c.beginWalkUpdateDomain == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/cloudServices/(?P<cloudServiceName>[a-zA-Z0-9-_]+)/updateDomains/(?P<updateDomain>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.UpdateDomain](req)
		if err != nil {
			return nil, err
		}
		updateDomainParam, err := strconv.ParseInt(matches[regex.SubexpIndex("updateDomain")], 10, 32)
		if err != nil {
			return nil, err
		}
		resp, errResp := c.srv.BeginWalkUpdateDomain(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("cloudServiceName")], int32(updateDomainParam), body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		c.beginWalkUpdateDomain = &resp
	}

	resp, err := c.beginWalkUpdateDomain.Next(req)
	if err != nil {
		return nil, err
	}

	if !c.beginWalkUpdateDomain.More() {
		c.beginWalkUpdateDomain = nil
	}

	return resp, nil
}
