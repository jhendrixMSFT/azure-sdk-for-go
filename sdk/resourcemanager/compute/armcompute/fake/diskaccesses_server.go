//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// DiskAccessesServer is a fake server for instances of the armcompute.DiskAccessesClient type.
type DiskAccessesServer struct {
	BeginCreateOrUpdate                    func(ctx context.Context, resourceGroupName string, diskAccessName string, diskAccess armcompute.DiskAccess, options *armcompute.DiskAccessesClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDelete                            func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientDeleteResponse], err azfake.ErrorResponder)
	BeginDeleteAPrivateEndpointConnection  func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, options *armcompute.DiskAccessesClientBeginDeleteAPrivateEndpointConnectionOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse], err azfake.ErrorResponder)
	Get                                    func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetResponse], err azfake.ErrorResponder)
	GetAPrivateEndpointConnection          func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, options *armcompute.DiskAccessesClientGetAPrivateEndpointConnectionOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetAPrivateEndpointConnectionResponse], err azfake.ErrorResponder)
	GetPrivateLinkResources                func(ctx context.Context, resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientGetPrivateLinkResourcesOptions) (resp azfake.Responder[armcompute.DiskAccessesClientGetPrivateLinkResourcesResponse], err azfake.ErrorResponder)
	NewListPager                           func(options *armcompute.DiskAccessesClientListOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListResponse])
	NewListByResourceGroupPager            func(resourceGroupName string, options *armcompute.DiskAccessesClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListByResourceGroupResponse])
	NewListPrivateEndpointConnectionsPager func(resourceGroupName string, diskAccessName string, options *armcompute.DiskAccessesClientListPrivateEndpointConnectionsOptions) (resp azfake.PagerResponder[armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse])
	BeginUpdate                            func(ctx context.Context, resourceGroupName string, diskAccessName string, diskAccess armcompute.DiskAccessUpdate, options *armcompute.DiskAccessesClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientUpdateResponse], err azfake.ErrorResponder)
	BeginUpdateAPrivateEndpointConnection  func(ctx context.Context, resourceGroupName string, diskAccessName string, privateEndpointConnectionName string, privateEndpointConnection armcompute.PrivateEndpointConnection, options *armcompute.DiskAccessesClientBeginUpdateAPrivateEndpointConnectionOptions) (resp azfake.PollerResponder[armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse], err azfake.ErrorResponder)
}

// NewDiskAccessesServerTransport creates a new instance of DiskAccessesServerTransport with the provided implementation.
// The returned DiskAccessesServerTransport instance is connected to an instance of armcompute.DiskAccessesClient by way of the
// undefined.Transporter field.
func NewDiskAccessesServerTransport(srv *DiskAccessesServer) *DiskAccessesServerTransport {
	return &DiskAccessesServerTransport{srv: srv}
}

// DiskAccessesServerTransport connects instances of armcompute.DiskAccessesClient to instances of DiskAccessesServer.
// Don't use this type directly, use NewDiskAccessesServerTransport instead.
type DiskAccessesServerTransport struct {
	srv                                    *DiskAccessesServer
	beginCreateOrUpdate                    *azfake.PollerResponder[armcompute.DiskAccessesClientCreateOrUpdateResponse]
	beginDelete                            *azfake.PollerResponder[armcompute.DiskAccessesClientDeleteResponse]
	beginDeleteAPrivateEndpointConnection  *azfake.PollerResponder[armcompute.DiskAccessesClientDeleteAPrivateEndpointConnectionResponse]
	newListPager                           *azfake.PagerResponder[armcompute.DiskAccessesClientListResponse]
	newListByResourceGroupPager            *azfake.PagerResponder[armcompute.DiskAccessesClientListByResourceGroupResponse]
	newListPrivateEndpointConnectionsPager *azfake.PagerResponder[armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse]
	beginUpdate                            *azfake.PollerResponder[armcompute.DiskAccessesClientUpdateResponse]
	beginUpdateAPrivateEndpointConnection  *azfake.PollerResponder[armcompute.DiskAccessesClientUpdateAPrivateEndpointConnectionResponse]
}

// Do implements the policy.Transporter interface for DiskAccessesServerTransport.
func (d *DiskAccessesServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DiskAccessesClient.BeginCreateOrUpdate":
		resp, err = d.dispatchBeginCreateOrUpdate(req)
	case "DiskAccessesClient.BeginDelete":
		resp, err = d.dispatchBeginDelete(req)
	case "DiskAccessesClient.BeginDeleteAPrivateEndpointConnection":
		resp, err = d.dispatchBeginDeleteAPrivateEndpointConnection(req)
	case "DiskAccessesClient.Get":
		resp, err = d.dispatchGet(req)
	case "DiskAccessesClient.GetAPrivateEndpointConnection":
		resp, err = d.dispatchGetAPrivateEndpointConnection(req)
	case "DiskAccessesClient.GetPrivateLinkResources":
		resp, err = d.dispatchGetPrivateLinkResources(req)
	case "DiskAccessesClient.NewListPager":
		resp, err = d.dispatchNewListPager(req)
	case "DiskAccessesClient.NewListByResourceGroupPager":
		resp, err = d.dispatchNewListByResourceGroupPager(req)
	case "DiskAccessesClient.NewListPrivateEndpointConnectionsPager":
		resp, err = d.dispatchNewListPrivateEndpointConnectionsPager(req)
	case "DiskAccessesClient.BeginUpdate":
		resp, err = d.dispatchBeginUpdate(req)
	case "DiskAccessesClient.BeginUpdateAPrivateEndpointConnection":
		resp, err = d.dispatchBeginUpdateAPrivateEndpointConnection(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if d.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.DiskAccess](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginCreateOrUpdate = &resp
	}

	resp, err := d.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginCreateOrUpdate.More() {
		d.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if d.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := d.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginDelete = &resp
	}

	resp, err := d.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginDelete.More() {
		d.beginDelete = nil
	}

	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchBeginDeleteAPrivateEndpointConnection(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDeleteAPrivateEndpointConnection == nil {
		return nil, &nonRetriableError{errors.New("method BeginDeleteAPrivateEndpointConnection not implemented")}
	}
	if d.beginDeleteAPrivateEndpointConnection == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)/privateEndpointConnections/(?P<privateEndpointConnectionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := d.srv.BeginDeleteAPrivateEndpointConnection(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], matches[regex.SubexpIndex("privateEndpointConnectionName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginDeleteAPrivateEndpointConnection = &resp
	}

	resp, err := d.beginDeleteAPrivateEndpointConnection.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginDeleteAPrivateEndpointConnection.More() {
		d.beginDeleteAPrivateEndpointConnection = nil
	}

	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := d.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (d *DiskAccessesServerTransport) dispatchGetAPrivateEndpointConnection(req *http.Request) (*http.Response, error) {
	if d.srv.GetAPrivateEndpointConnection == nil {
		return nil, &nonRetriableError{errors.New("method GetAPrivateEndpointConnection not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)/privateEndpointConnections/(?P<privateEndpointConnectionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 4 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := d.srv.GetAPrivateEndpointConnection(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], matches[regex.SubexpIndex("privateEndpointConnectionName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (d *DiskAccessesServerTransport) dispatchGetPrivateLinkResources(req *http.Request) (*http.Response, error) {
	if d.srv.GetPrivateLinkResources == nil {
		return nil, &nonRetriableError{errors.New("method GetPrivateLinkResources not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)/privateLinkResources"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := d.srv.GetPrivateLinkResources(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (d *DiskAccessesServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if d.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListPager(nil)
		resp.InjectNextLinks(req, func(page *armcompute.DiskAccessesClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListPager = &resp
	}

	resp, err := d.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListPager.More() {
		d.newListPager = nil
	}
	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByResourceGroupPager not implemented")}
	}
	if d.newListByResourceGroupPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListByResourceGroupPager(matches[regex.SubexpIndex("resourceGroupName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.DiskAccessesClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListByResourceGroupPager = &resp
	}

	resp, err := d.newListByResourceGroupPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListByResourceGroupPager.More() {
		d.newListByResourceGroupPager = nil
	}
	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchNewListPrivateEndpointConnectionsPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListPrivateEndpointConnectionsPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPrivateEndpointConnectionsPager not implemented")}
	}
	if d.newListPrivateEndpointConnectionsPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)/privateEndpointConnections"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListPrivateEndpointConnectionsPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.DiskAccessesClientListPrivateEndpointConnectionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListPrivateEndpointConnectionsPager = &resp
	}

	resp, err := d.newListPrivateEndpointConnectionsPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListPrivateEndpointConnectionsPager.More() {
		d.newListPrivateEndpointConnectionsPager = nil
	}
	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if d.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.DiskAccessUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginUpdate = &resp
	}

	resp, err := d.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginUpdate.More() {
		d.beginUpdate = nil
	}

	return resp, nil
}

func (d *DiskAccessesServerTransport) dispatchBeginUpdateAPrivateEndpointConnection(req *http.Request) (*http.Response, error) {
	if d.srv.BeginUpdateAPrivateEndpointConnection == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdateAPrivateEndpointConnection not implemented")}
	}
	if d.beginUpdateAPrivateEndpointConnection == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskAccesses/(?P<diskAccessName>[a-zA-Z0-9-_]+)/privateEndpointConnections/(?P<privateEndpointConnectionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.PrivateEndpointConnection](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginUpdateAPrivateEndpointConnection(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskAccessName")], matches[regex.SubexpIndex("privateEndpointConnectionName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginUpdateAPrivateEndpointConnection = &resp
	}

	resp, err := d.beginUpdateAPrivateEndpointConnection.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginUpdateAPrivateEndpointConnection.More() {
		d.beginUpdateAPrivateEndpointConnection = nil
	}

	return resp, nil
}
