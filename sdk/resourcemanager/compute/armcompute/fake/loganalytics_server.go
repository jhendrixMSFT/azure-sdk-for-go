//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// LogAnalyticsServer is a fake server for instances of the armcompute.LogAnalyticsClient type.
type LogAnalyticsServer struct {
	BeginExportRequestRateByInterval func(ctx context.Context, location string, parameters armcompute.RequestRateByIntervalInput, options *armcompute.LogAnalyticsClientBeginExportRequestRateByIntervalOptions) (resp azfake.PollerResponder[armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse], err azfake.ErrorResponder)
	BeginExportThrottledRequests     func(ctx context.Context, location string, parameters armcompute.ThrottledRequestsInput, options *armcompute.LogAnalyticsClientBeginExportThrottledRequestsOptions) (resp azfake.PollerResponder[armcompute.LogAnalyticsClientExportThrottledRequestsResponse], err azfake.ErrorResponder)
}

// NewLogAnalyticsServerTransport creates a new instance of LogAnalyticsServerTransport with the provided implementation.
// The returned LogAnalyticsServerTransport instance is connected to an instance of armcompute.LogAnalyticsClient by way of the
// undefined.Transporter field.
func NewLogAnalyticsServerTransport(srv *LogAnalyticsServer) *LogAnalyticsServerTransport {
	return &LogAnalyticsServerTransport{srv: srv}
}

// LogAnalyticsServerTransport connects instances of armcompute.LogAnalyticsClient to instances of LogAnalyticsServer.
// Don't use this type directly, use NewLogAnalyticsServerTransport instead.
type LogAnalyticsServerTransport struct {
	srv                              *LogAnalyticsServer
	beginExportRequestRateByInterval *azfake.PollerResponder[armcompute.LogAnalyticsClientExportRequestRateByIntervalResponse]
	beginExportThrottledRequests     *azfake.PollerResponder[armcompute.LogAnalyticsClientExportThrottledRequestsResponse]
}

// Do implements the policy.Transporter interface for LogAnalyticsServerTransport.
func (l *LogAnalyticsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "LogAnalyticsClient.BeginExportRequestRateByInterval":
		resp, err = l.dispatchBeginExportRequestRateByInterval(req)
	case "LogAnalyticsClient.BeginExportThrottledRequests":
		resp, err = l.dispatchBeginExportThrottledRequests(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (l *LogAnalyticsServerTransport) dispatchBeginExportRequestRateByInterval(req *http.Request) (*http.Response, error) {
	if l.srv.BeginExportRequestRateByInterval == nil {
		return nil, &nonRetriableError{errors.New("method BeginExportRequestRateByInterval not implemented")}
	}
	if l.beginExportRequestRateByInterval == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/logAnalytics/apiAccess/getRequestRateByInterval"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.RequestRateByIntervalInput](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := l.srv.BeginExportRequestRateByInterval(req.Context(), matches[regex.SubexpIndex("location")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		l.beginExportRequestRateByInterval = &resp
	}

	resp, err := l.beginExportRequestRateByInterval.Next(req)
	if err != nil {
		return nil, err
	}

	if !l.beginExportRequestRateByInterval.More() {
		l.beginExportRequestRateByInterval = nil
	}

	return resp, nil
}

func (l *LogAnalyticsServerTransport) dispatchBeginExportThrottledRequests(req *http.Request) (*http.Response, error) {
	if l.srv.BeginExportThrottledRequests == nil {
		return nil, &nonRetriableError{errors.New("method BeginExportThrottledRequests not implemented")}
	}
	if l.beginExportThrottledRequests == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/logAnalytics/apiAccess/getThrottledRequests"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.ThrottledRequestsInput](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := l.srv.BeginExportThrottledRequests(req.Context(), matches[regex.SubexpIndex("location")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		l.beginExportThrottledRequests = &resp
	}

	resp, err := l.beginExportThrottledRequests.Next(req)
	if err != nil {
		return nil, err
	}

	if !l.beginExportThrottledRequests.More() {
		l.beginExportThrottledRequests = nil
	}

	return resp, nil
}
