//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// CloudServiceOperatingSystemsServer is a fake server for instances of the armcompute.CloudServiceOperatingSystemsClient type.
type CloudServiceOperatingSystemsServer struct {
	GetOSFamily            func(ctx context.Context, location string, osFamilyName string, options *armcompute.CloudServiceOperatingSystemsClientGetOSFamilyOptions) (resp azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSFamilyResponse], err azfake.ErrorResponder)
	GetOSVersion           func(ctx context.Context, location string, osVersionName string, options *armcompute.CloudServiceOperatingSystemsClientGetOSVersionOptions) (resp azfake.Responder[armcompute.CloudServiceOperatingSystemsClientGetOSVersionResponse], err azfake.ErrorResponder)
	NewListOSFamiliesPager func(location string, options *armcompute.CloudServiceOperatingSystemsClientListOSFamiliesOptions) (resp azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse])
	NewListOSVersionsPager func(location string, options *armcompute.CloudServiceOperatingSystemsClientListOSVersionsOptions) (resp azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse])
}

// NewCloudServiceOperatingSystemsServerTransport creates a new instance of CloudServiceOperatingSystemsServerTransport with the provided implementation.
// The returned CloudServiceOperatingSystemsServerTransport instance is connected to an instance of armcompute.CloudServiceOperatingSystemsClient by way of the
// undefined.Transporter field.
func NewCloudServiceOperatingSystemsServerTransport(srv *CloudServiceOperatingSystemsServer) *CloudServiceOperatingSystemsServerTransport {
	return &CloudServiceOperatingSystemsServerTransport{srv: srv}
}

// CloudServiceOperatingSystemsServerTransport connects instances of armcompute.CloudServiceOperatingSystemsClient to instances of CloudServiceOperatingSystemsServer.
// Don't use this type directly, use NewCloudServiceOperatingSystemsServerTransport instead.
type CloudServiceOperatingSystemsServerTransport struct {
	srv                    *CloudServiceOperatingSystemsServer
	newListOSFamiliesPager *azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse]
	newListOSVersionsPager *azfake.PagerResponder[armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse]
}

// Do implements the policy.Transporter interface for CloudServiceOperatingSystemsServerTransport.
func (c *CloudServiceOperatingSystemsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "CloudServiceOperatingSystemsClient.GetOSFamily":
		resp, err = c.dispatchGetOSFamily(req)
	case "CloudServiceOperatingSystemsClient.GetOSVersion":
		resp, err = c.dispatchGetOSVersion(req)
	case "CloudServiceOperatingSystemsClient.NewListOSFamiliesPager":
		resp, err = c.dispatchNewListOSFamiliesPager(req)
	case "CloudServiceOperatingSystemsClient.NewListOSVersionsPager":
		resp, err = c.dispatchNewListOSVersionsPager(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *CloudServiceOperatingSystemsServerTransport) dispatchGetOSFamily(req *http.Request) (*http.Response, error) {
	if c.srv.GetOSFamily == nil {
		return nil, &nonRetriableError{errors.New("method GetOSFamily not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/cloudServiceOsFamilies/(?P<osFamilyName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := c.srv.GetOSFamily(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("osFamilyName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CloudServiceOperatingSystemsServerTransport) dispatchGetOSVersion(req *http.Request) (*http.Response, error) {
	if c.srv.GetOSVersion == nil {
		return nil, &nonRetriableError{errors.New("method GetOSVersion not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/cloudServiceOsVersions/(?P<osVersionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := c.srv.GetOSVersion(req.Context(), matches[regex.SubexpIndex("location")], matches[regex.SubexpIndex("osVersionName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (c *CloudServiceOperatingSystemsServerTransport) dispatchNewListOSFamiliesPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListOSFamiliesPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListOSFamiliesPager not implemented")}
	}
	if c.newListOSFamiliesPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/cloudServiceOsFamilies"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := c.srv.NewListOSFamiliesPager(matches[regex.SubexpIndex("location")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.CloudServiceOperatingSystemsClientListOSFamiliesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		c.newListOSFamiliesPager = &resp
	}

	resp, err := c.newListOSFamiliesPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !c.newListOSFamiliesPager.More() {
		c.newListOSFamiliesPager = nil
	}
	return resp, nil
}

func (c *CloudServiceOperatingSystemsServerTransport) dispatchNewListOSVersionsPager(req *http.Request) (*http.Response, error) {
	if c.srv.NewListOSVersionsPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListOSVersionsPager not implemented")}
	}
	if c.newListOSVersionsPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/locations/(?P<location>[a-zA-Z0-9-_]+)/cloudServiceOsVersions"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := c.srv.NewListOSVersionsPager(matches[regex.SubexpIndex("location")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.CloudServiceOperatingSystemsClientListOSVersionsResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		c.newListOSVersionsPager = &resp
	}

	resp, err := c.newListOSVersionsPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !c.newListOSVersionsPager.More() {
		c.newListOSVersionsPager = nil
	}
	return resp, nil
}
