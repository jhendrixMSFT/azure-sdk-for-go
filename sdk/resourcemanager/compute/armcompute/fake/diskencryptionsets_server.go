//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// DiskEncryptionSetsServer is a fake server for instances of the armcompute.DiskEncryptionSetsClient type.
type DiskEncryptionSetsServer struct {
	BeginCreateOrUpdate             func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSet, options *armcompute.DiskEncryptionSetsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDelete                     func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientDeleteResponse], err azfake.ErrorResponder)
	Get                             func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientGetOptions) (resp azfake.Responder[armcompute.DiskEncryptionSetsClientGetResponse], err azfake.ErrorResponder)
	NewListPager                    func(options *armcompute.DiskEncryptionSetsClientListOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListResponse])
	NewListAssociatedResourcesPager func(resourceGroupName string, diskEncryptionSetName string, options *armcompute.DiskEncryptionSetsClientListAssociatedResourcesOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse])
	NewListByResourceGroupPager     func(resourceGroupName string, options *armcompute.DiskEncryptionSetsClientListByResourceGroupOptions) (resp azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListByResourceGroupResponse])
	BeginUpdate                     func(ctx context.Context, resourceGroupName string, diskEncryptionSetName string, diskEncryptionSet armcompute.DiskEncryptionSetUpdate, options *armcompute.DiskEncryptionSetsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse], err azfake.ErrorResponder)
}

// NewDiskEncryptionSetsServerTransport creates a new instance of DiskEncryptionSetsServerTransport with the provided implementation.
// The returned DiskEncryptionSetsServerTransport instance is connected to an instance of armcompute.DiskEncryptionSetsClient by way of the
// undefined.Transporter field.
func NewDiskEncryptionSetsServerTransport(srv *DiskEncryptionSetsServer) *DiskEncryptionSetsServerTransport {
	return &DiskEncryptionSetsServerTransport{srv: srv}
}

// DiskEncryptionSetsServerTransport connects instances of armcompute.DiskEncryptionSetsClient to instances of DiskEncryptionSetsServer.
// Don't use this type directly, use NewDiskEncryptionSetsServerTransport instead.
type DiskEncryptionSetsServerTransport struct {
	srv                             *DiskEncryptionSetsServer
	beginCreateOrUpdate             *azfake.PollerResponder[armcompute.DiskEncryptionSetsClientCreateOrUpdateResponse]
	beginDelete                     *azfake.PollerResponder[armcompute.DiskEncryptionSetsClientDeleteResponse]
	newListPager                    *azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListResponse]
	newListAssociatedResourcesPager *azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse]
	newListByResourceGroupPager     *azfake.PagerResponder[armcompute.DiskEncryptionSetsClientListByResourceGroupResponse]
	beginUpdate                     *azfake.PollerResponder[armcompute.DiskEncryptionSetsClientUpdateResponse]
}

// Do implements the policy.Transporter interface for DiskEncryptionSetsServerTransport.
func (d *DiskEncryptionSetsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "DiskEncryptionSetsClient.BeginCreateOrUpdate":
		resp, err = d.dispatchBeginCreateOrUpdate(req)
	case "DiskEncryptionSetsClient.BeginDelete":
		resp, err = d.dispatchBeginDelete(req)
	case "DiskEncryptionSetsClient.Get":
		resp, err = d.dispatchGet(req)
	case "DiskEncryptionSetsClient.NewListPager":
		resp, err = d.dispatchNewListPager(req)
	case "DiskEncryptionSetsClient.NewListAssociatedResourcesPager":
		resp, err = d.dispatchNewListAssociatedResourcesPager(req)
	case "DiskEncryptionSetsClient.NewListByResourceGroupPager":
		resp, err = d.dispatchNewListByResourceGroupPager(req)
	case "DiskEncryptionSetsClient.BeginUpdate":
		resp, err = d.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (d *DiskEncryptionSetsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if d.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets/(?P<diskEncryptionSetName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.DiskEncryptionSet](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskEncryptionSetName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginCreateOrUpdate = &resp
	}

	resp, err := d.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginCreateOrUpdate.More() {
		d.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (d *DiskEncryptionSetsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if d.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if d.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets/(?P<diskEncryptionSetName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := d.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskEncryptionSetName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginDelete = &resp
	}

	resp, err := d.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginDelete.More() {
		d.beginDelete = nil
	}

	return resp, nil
}

func (d *DiskEncryptionSetsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if d.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets/(?P<diskEncryptionSetName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 3 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	resp, errResp := d.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskEncryptionSetName")], nil)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (d *DiskEncryptionSetsServerTransport) dispatchNewListPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListPager not implemented")}
	}
	if d.newListPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 1 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListPager(nil)
		resp.InjectNextLinks(req, func(page *armcompute.DiskEncryptionSetsClientListResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListPager = &resp
	}

	resp, err := d.newListPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListPager.More() {
		d.newListPager = nil
	}
	return resp, nil
}

func (d *DiskEncryptionSetsServerTransport) dispatchNewListAssociatedResourcesPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListAssociatedResourcesPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListAssociatedResourcesPager not implemented")}
	}
	if d.newListAssociatedResourcesPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets/(?P<diskEncryptionSetName>[a-zA-Z0-9-_]+)/associatedResources"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListAssociatedResourcesPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskEncryptionSetName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.DiskEncryptionSetsClientListAssociatedResourcesResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListAssociatedResourcesPager = &resp
	}

	resp, err := d.newListAssociatedResourcesPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListAssociatedResourcesPager.More() {
		d.newListAssociatedResourcesPager = nil
	}
	return resp, nil
}

func (d *DiskEncryptionSetsServerTransport) dispatchNewListByResourceGroupPager(req *http.Request) (*http.Response, error) {
	if d.srv.NewListByResourceGroupPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByResourceGroupPager not implemented")}
	}
	if d.newListByResourceGroupPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 2 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := d.srv.NewListByResourceGroupPager(matches[regex.SubexpIndex("resourceGroupName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.DiskEncryptionSetsClientListByResourceGroupResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		d.newListByResourceGroupPager = &resp
	}

	resp, err := d.newListByResourceGroupPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !d.newListByResourceGroupPager.More() {
		d.newListByResourceGroupPager = nil
	}
	return resp, nil
}

func (d *DiskEncryptionSetsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if d.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if d.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/diskEncryptionSets/(?P<diskEncryptionSetName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 3 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.DiskEncryptionSetUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := d.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("diskEncryptionSetName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		d.beginUpdate = &resp
	}

	resp, err := d.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !d.beginUpdate.More() {
		d.beginUpdate = nil
	}

	return resp, nil
}
