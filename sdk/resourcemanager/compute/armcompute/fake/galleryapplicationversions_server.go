//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package fake

import (
	"context"
	"errors"
	"fmt"
	azfake "github.com/Azure/azure-sdk-for-go/sdk/azcore/fake"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/runtime"
	"github.com/Azure/azure-sdk-for-go/sdk/azcore/to"
	"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute/v4"
	"net/http"
	"regexp"
)

// GalleryApplicationVersionsServer is a fake server for instances of the armcompute.GalleryApplicationVersionsClient type.
type GalleryApplicationVersionsServer struct {
	BeginCreateOrUpdate              func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, galleryApplicationVersion armcompute.GalleryApplicationVersion, options *armcompute.GalleryApplicationVersionsClientBeginCreateOrUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse], err azfake.ErrorResponder)
	BeginDelete                      func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientBeginDeleteOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientDeleteResponse], err azfake.ErrorResponder)
	Get                              func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, options *armcompute.GalleryApplicationVersionsClientGetOptions) (resp azfake.Responder[armcompute.GalleryApplicationVersionsClientGetResponse], err azfake.ErrorResponder)
	NewListByGalleryApplicationPager func(resourceGroupName string, galleryName string, galleryApplicationName string, options *armcompute.GalleryApplicationVersionsClientListByGalleryApplicationOptions) (resp azfake.PagerResponder[armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse])
	BeginUpdate                      func(ctx context.Context, resourceGroupName string, galleryName string, galleryApplicationName string, galleryApplicationVersionName string, galleryApplicationVersion armcompute.GalleryApplicationVersionUpdate, options *armcompute.GalleryApplicationVersionsClientBeginUpdateOptions) (resp azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientUpdateResponse], err azfake.ErrorResponder)
}

// NewGalleryApplicationVersionsServerTransport creates a new instance of GalleryApplicationVersionsServerTransport with the provided implementation.
// The returned GalleryApplicationVersionsServerTransport instance is connected to an instance of armcompute.GalleryApplicationVersionsClient by way of the
// undefined.Transporter field.
func NewGalleryApplicationVersionsServerTransport(srv *GalleryApplicationVersionsServer) *GalleryApplicationVersionsServerTransport {
	return &GalleryApplicationVersionsServerTransport{srv: srv}
}

// GalleryApplicationVersionsServerTransport connects instances of armcompute.GalleryApplicationVersionsClient to instances of GalleryApplicationVersionsServer.
// Don't use this type directly, use NewGalleryApplicationVersionsServerTransport instead.
type GalleryApplicationVersionsServerTransport struct {
	srv                              *GalleryApplicationVersionsServer
	beginCreateOrUpdate              *azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientCreateOrUpdateResponse]
	beginDelete                      *azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientDeleteResponse]
	newListByGalleryApplicationPager *azfake.PagerResponder[armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse]
	beginUpdate                      *azfake.PollerResponder[armcompute.GalleryApplicationVersionsClientUpdateResponse]
}

// Do implements the policy.Transporter interface for GalleryApplicationVersionsServerTransport.
func (g *GalleryApplicationVersionsServerTransport) Do(req *http.Request) (*http.Response, error) {
	rawMethod := req.Context().Value(runtime.CtxAPINameKey{})
	method, ok := rawMethod.(string)
	if !ok {
		return nil, nonRetriableError{errors.New("unable to dispatch request, missing value for CtxAPINameKey")}
	}

	var resp *http.Response
	var err error

	switch method {
	case "GalleryApplicationVersionsClient.BeginCreateOrUpdate":
		resp, err = g.dispatchBeginCreateOrUpdate(req)
	case "GalleryApplicationVersionsClient.BeginDelete":
		resp, err = g.dispatchBeginDelete(req)
	case "GalleryApplicationVersionsClient.Get":
		resp, err = g.dispatchGet(req)
	case "GalleryApplicationVersionsClient.NewListByGalleryApplicationPager":
		resp, err = g.dispatchNewListByGalleryApplicationPager(req)
	case "GalleryApplicationVersionsClient.BeginUpdate":
		resp, err = g.dispatchBeginUpdate(req)
	default:
		err = fmt.Errorf("unhandled API %s", method)
	}

	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GalleryApplicationVersionsServerTransport) dispatchBeginCreateOrUpdate(req *http.Request) (*http.Response, error) {
	if g.srv.BeginCreateOrUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginCreateOrUpdate not implemented")}
	}
	if g.beginCreateOrUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/galleries/(?P<galleryName>[a-zA-Z0-9-_]+)/applications/(?P<galleryApplicationName>[a-zA-Z0-9-_]+)/versions/(?P<galleryApplicationVersionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.GalleryApplicationVersion](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := g.srv.BeginCreateOrUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("galleryName")], matches[regex.SubexpIndex("galleryApplicationName")], matches[regex.SubexpIndex("galleryApplicationVersionName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		g.beginCreateOrUpdate = &resp
	}

	resp, err := g.beginCreateOrUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !g.beginCreateOrUpdate.More() {
		g.beginCreateOrUpdate = nil
	}

	return resp, nil
}

func (g *GalleryApplicationVersionsServerTransport) dispatchBeginDelete(req *http.Request) (*http.Response, error) {
	if g.srv.BeginDelete == nil {
		return nil, &nonRetriableError{errors.New("method BeginDelete not implemented")}
	}
	if g.beginDelete == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/galleries/(?P<galleryName>[a-zA-Z0-9-_]+)/applications/(?P<galleryApplicationName>[a-zA-Z0-9-_]+)/versions/(?P<galleryApplicationVersionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp, errResp := g.srv.BeginDelete(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("galleryName")], matches[regex.SubexpIndex("galleryApplicationName")], matches[regex.SubexpIndex("galleryApplicationVersionName")], nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		g.beginDelete = &resp
	}

	resp, err := g.beginDelete.Next(req)
	if err != nil {
		return nil, err
	}

	if !g.beginDelete.More() {
		g.beginDelete = nil
	}

	return resp, nil
}

func (g *GalleryApplicationVersionsServerTransport) dispatchGet(req *http.Request) (*http.Response, error) {
	if g.srv.Get == nil {
		return nil, &nonRetriableError{errors.New("method Get not implemented")}
	}
	const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/galleries/(?P<galleryName>[a-zA-Z0-9-_]+)/applications/(?P<galleryApplicationName>[a-zA-Z0-9-_]+)/versions/(?P<galleryApplicationVersionName>[a-zA-Z0-9-_]+)"
	regex := regexp.MustCompile(regexStr)
	matches := regex.FindStringSubmatch(req.URL.Path)
	if matches == nil || len(matches) < 5 {
		return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
	}
	qp := req.URL.Query()
	options := armcompute.GalleryApplicationVersionsClientGetOptions{
		Expand: getOptional(armcompute.ReplicationStatusTypes(qp.Get("$expand"))),
	}
	resp, errResp := g.srv.Get(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("galleryName")], matches[regex.SubexpIndex("galleryApplicationName")], matches[regex.SubexpIndex("galleryApplicationVersionName")], &options)
	if err := errResp.Get(req); err != nil {
		return nil, err
	}
	return resp.MarshalResponseAsJSON(req)
}

func (g *GalleryApplicationVersionsServerTransport) dispatchNewListByGalleryApplicationPager(req *http.Request) (*http.Response, error) {
	if g.srv.NewListByGalleryApplicationPager == nil {
		return nil, &nonRetriableError{errors.New("method NewListByGalleryApplicationPager not implemented")}
	}
	if g.newListByGalleryApplicationPager == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/galleries/(?P<galleryName>[a-zA-Z0-9-_]+)/applications/(?P<galleryApplicationName>[a-zA-Z0-9-_]+)/versions"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 4 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		resp := g.srv.NewListByGalleryApplicationPager(matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("galleryName")], matches[regex.SubexpIndex("galleryApplicationName")], nil)
		resp.InjectNextLinks(req, func(page *armcompute.GalleryApplicationVersionsClientListByGalleryApplicationResponse, createLink func() string) {
			page.NextLink = to.Ptr(createLink())
		})
		g.newListByGalleryApplicationPager = &resp
	}

	resp, err := g.newListByGalleryApplicationPager.Next(req)
	if err != nil {
		return nil, err
	}
	if !g.newListByGalleryApplicationPager.More() {
		g.newListByGalleryApplicationPager = nil
	}
	return resp, nil
}

func (g *GalleryApplicationVersionsServerTransport) dispatchBeginUpdate(req *http.Request) (*http.Response, error) {
	if g.srv.BeginUpdate == nil {
		return nil, &nonRetriableError{errors.New("method BeginUpdate not implemented")}
	}
	if g.beginUpdate == nil {
		const regexStr = "/subscriptions/(?P<subscriptionId>[a-zA-Z0-9-_]+)/resourceGroups/(?P<resourceGroupName>[a-zA-Z0-9-_]+)/providers/Microsoft.Compute/galleries/(?P<galleryName>[a-zA-Z0-9-_]+)/applications/(?P<galleryApplicationName>[a-zA-Z0-9-_]+)/versions/(?P<galleryApplicationVersionName>[a-zA-Z0-9-_]+)"
		regex := regexp.MustCompile(regexStr)
		matches := regex.FindStringSubmatch(req.URL.Path)
		if matches == nil || len(matches) < 5 {
			return nil, fmt.Errorf("failed to parse path %s", req.URL.Path)
		}
		body, err := azfake.UnmarshalRequestAsJSON[armcompute.GalleryApplicationVersionUpdate](req)
		if err != nil {
			return nil, err
		}
		resp, errResp := g.srv.BeginUpdate(req.Context(), matches[regex.SubexpIndex("resourceGroupName")], matches[regex.SubexpIndex("galleryName")], matches[regex.SubexpIndex("galleryApplicationName")], matches[regex.SubexpIndex("galleryApplicationVersionName")], body, nil)
		if err := errResp.Get(req); err != nil {
			return nil, err
		}
		g.beginUpdate = &resp
	}

	resp, err := g.beginUpdate.Next(req)
	if err != nil {
		return nil, err
	}

	if !g.beginUpdate.More() {
		g.beginUpdate = nil
	}

	return resp, nil
}
